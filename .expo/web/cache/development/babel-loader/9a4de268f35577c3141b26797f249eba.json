{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Node.Js\\\\React Native\\\\weather\\\\app\\\\screens\\\\HomeScreen.js\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport Report from \"../components/Report\";\nimport Header from \"../components/Header\";\nimport { Context } from \"../context/Context\";\nimport MenuScreen from \"./MenuScreen\";\nimport PredictionScreen from \"./PredictionScreen\";\nexport default function HomeScreen() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      refreshing = _useState2[0],\n      setRefreshing = _useState2[1];\n\n  var _useContext = useContext(Context),\n      coords = _useContext.coords,\n      dataFromCoords = _useContext.dataFromCoords,\n      listLocations = _useContext.listLocations,\n      setCoords = _useContext.setCoords;\n\n  useEffect(function () {\n    navigator.geolocation.getCurrentPosition(function (_ref) {\n      var coords = _ref.coords;\n      setCoords({\n        lat: coords.latitude,\n        lon: coords.longitude\n      });\n    }, function (err) {\n      console.log(err);\n      setCoords({\n        lat: 0,\n        lon: 0\n      });\n    });\n  }, []);\n  useEffect(function () {\n    eff();\n  }, [coords]);\n\n  var eff = function eff() {\n    return _regeneratorRuntime.async(function eff$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setRefreshing(true);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(dataFromCoords(coords));\n\n          case 3:\n            listLocations();\n            setRefreshing(false);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(ScrollView, {\n    refreshControl: React.createElement(RefreshControl, {\n      refreshing: refreshing,\n      onRefresh: eff,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, React.createElement(Report, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["D:/Node.Js/React Native/weather/app/screens/HomeScreen.js"],"names":["React","useState","useEffect","useContext","Report","Header","Context","MenuScreen","PredictionScreen","HomeScreen","refreshing","setRefreshing","coords","dataFromCoords","listLocations","setCoords","navigator","geolocation","getCurrentPosition","lat","latitude","lon","longitude","err","console","log","eff"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;;;;AAEA,OAAOC,MAAP;AACA,OAAOC,MAAP;AACA,SAASC,OAAT;AACA,OAAOC,UAAP;AACA,OAAOC,gBAAP;AAEA,eAAe,SAASC,UAAT,GAAsB;AAAA,kBACCR,QAAQ,CAAC,KAAD,CADT;AAAA;AAAA,MAC5BS,UAD4B;AAAA,MAChBC,aADgB;;AAAA,oBAE0BR,UAAU,CACrEG,OADqE,CAFpC;AAAA,MAE3BM,MAF2B,eAE3BA,MAF2B;AAAA,MAEnBC,cAFmB,eAEnBA,cAFmB;AAAA,MAEHC,aAFG,eAEHA,aAFG;AAAA,MAEYC,SAFZ,eAEYA,SAFZ;;AAOnCb,EAAAA,SAAS,CAAC,YAAM;AACdc,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACE,gBAAgB;AAAA,UAAbN,MAAa,QAAbA,MAAa;AACdG,MAAAA,SAAS,CAAC;AAAEI,QAAAA,GAAG,EAAEP,MAAM,CAACQ,QAAd;AAAwBC,QAAAA,GAAG,EAAET,MAAM,CAACU;AAApC,OAAD,CAAT;AACD,KAHH,EAIE,UAACC,GAAD,EAAS;AACPC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAR,MAAAA,SAAS,CAAC;AAAEI,QAAAA,GAAG,EAAE,CAAP;AAAUE,QAAAA,GAAG,EAAE;AAAf,OAAD,CAAT;AACD,KAPH;AASD,GAVQ,EAUN,EAVM,CAAT;AAaAnB,EAAAA,SAAS,CAAC,YAAM;AACdwB,IAAAA,GAAG;AACJ,GAFQ,EAEN,CAACd,MAAD,CAFM,CAAT;;AAIA,MAAMc,GAAG,GAAG,SAANA,GAAM;AAAA;AAAA;AAAA;AAAA;AACVf,YAAAA,aAAa,CAAC,IAAD,CAAb;AADU;AAAA,6CAEJE,cAAc,CAACD,MAAD,CAFV;;AAAA;AAGVE,YAAAA,aAAa;AACbH,YAAAA,aAAa,CAAC,KAAD,CAAb;;AAJU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ;;AAMA,SACE,oBAAC,UAAD;AACE,IAAA,cAAc,EACZ,oBAAC,cAAD;AAAgB,MAAA,UAAU,EAAED,UAA5B;AAAwC,MAAA,SAAS,EAAEgB,GAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF;AASD","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport { ImageBackground, ScrollView, RefreshControl } from \"react-native\";\r\nimport Report from \"../components/Report\";\r\nimport Header from \"../components/Header\";\r\nimport { Context } from \"../context/Context\";\r\nimport MenuScreen from \"./MenuScreen\";\r\nimport PredictionScreen from \"./PredictionScreen\";\r\n\r\nexport default function HomeScreen() {\r\n  const [refreshing, setRefreshing] = useState(false);\r\n  const { coords, dataFromCoords, listLocations, setCoords } = useContext(\r\n    Context\r\n  );\r\n\r\n  // get location from phone\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      ({ coords }) => {\r\n        setCoords({ lat: coords.latitude, lon: coords.longitude });\r\n      },\r\n      (err) => {\r\n        console.log(err);\r\n        setCoords({ lat: 0, lon: 0 });\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  // get data for specific location\r\n  useEffect(() => {\r\n    eff();\r\n  }, [coords]);\r\n\r\n  const eff = async () => {\r\n    setRefreshing(true);\r\n    await dataFromCoords(coords);\r\n    listLocations();\r\n    setRefreshing(false);\r\n  };\r\n  return (\r\n    <ScrollView\r\n      refreshControl={\r\n        <RefreshControl refreshing={refreshing} onRefresh={eff} />\r\n      }\r\n    >\r\n      <Report />\r\n    </ScrollView>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}