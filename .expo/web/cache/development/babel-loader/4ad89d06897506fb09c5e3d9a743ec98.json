{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\Node.Js\\\\React Native\\\\weather\\\\app\\\\screens\\\\PredictionScreen.js\";\n\nimport React, { useContext } from \"react\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Context } from \"../context/Context\";\nimport Item from \"../components/Item\";\nvar height = Dimensions.get(\"window\").height - 10;\nvar width = Dimensions.get(\"window\").width;\n\nvar PredictionScreen = function PredictionScreen() {\n  var _useContext = useContext(Context),\n      weatherData = _useContext.weatherData,\n      active = _useContext.active;\n\n  var data = weatherData[active] ? weatherData[active].data : undefined;\n  return React.createElement(ImageBackground, {\n    source: {\n      uri: \"http://picsum.photos/720/540?blur=1\"\n    },\n    style: {\n      height: height,\n      width: width\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: {\n      backgroundColor: \"rgba(220, 220, 220, 0.4)\",\n      color: \"#19C3FB\",\n      fontSize: 26,\n      fontWeight: \"bold\",\n      textAlign: \"center\",\n      textAlignVertical: \"center\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, \"Predictions\"), data ? React.createElement(FlatList, {\n    data: data.daily,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(Item, {\n        weather: item.weather[0],\n        temp: {\n          min: item.temp.min,\n          max: item.temp.max\n        },\n        time: item.dt,\n        timezone: data.timezone_offset,\n        type: \"daily\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 15\n        }\n      });\n    },\n    keyExtractor: function keyExtractor(item, index) {\n      return item + index;\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }) : React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, \"No data found\")));\n};\n\nexport default PredictionScreen;","map":{"version":3,"sources":["D:/Node.Js/React Native/weather/app/screens/PredictionScreen.js"],"names":["React","useContext","Context","Item","height","Dimensions","get","width","PredictionScreen","weatherData","active","data","undefined","uri","backgroundColor","color","fontSize","fontWeight","textAlign","textAlignVertical","daily","item","weather","min","temp","max","dt","timezone_offset","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;;;;;;AAQA,SAASC,OAAT;AACA,OAAOC,IAAP;AACA,IAAMC,MAAM,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,MAAzB,GAAkC,EAAjD;AACA,IAAMG,KAAK,GAAGF,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAAvC;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAAA,oBACGP,UAAU,CAACC,OAAD,CADb;AAAA,MACrBO,WADqB,eACrBA,WADqB;AAAA,MACRC,MADQ,eACRA,MADQ;;AAE7B,MAAMC,IAAI,GAAGF,WAAW,CAACC,MAAD,CAAX,GAAsBD,WAAW,CAACC,MAAD,CAAX,CAAoBC,IAA1C,GAAiDC,SAA9D;AACA,SACE,oBAAC,eAAD;AACE,IAAA,MAAM,EAAE;AAAEC,MAAAA,GAAG,EAAE;AAAP,KADV;AAEE,IAAA,KAAK,EAAE;AAAET,MAAAA,MAAM,EAAEA,MAAV;AAAkBG,MAAAA,KAAK,EAAEA;AAAzB,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE;AACLO,MAAAA,eAAe,EAAE,0BADZ;AAELC,MAAAA,KAAK,EAAE,SAFF;AAGLC,MAAAA,QAAQ,EAAE,EAHL;AAILC,MAAAA,UAAU,EAAE,MAJP;AAKLC,MAAAA,SAAS,EAAE,QALN;AAMLC,MAAAA,iBAAiB,EAAE;AANd,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAaGR,IAAI,GACH,oBAAC,QAAD;AACE,IAAA,IAAI,EAAEA,IAAI,CAACS,KADb;AAEE,IAAA,UAAU,EAAE;AAAA,UAAGC,IAAH,QAAGA,IAAH;AAAA,aACV,oBAAC,IAAD;AACE,QAAA,OAAO,EAAEA,IAAI,CAACC,OAAL,CAAa,CAAb,CADX;AAEE,QAAA,IAAI,EAAE;AAAEC,UAAAA,GAAG,EAAEF,IAAI,CAACG,IAAL,CAAUD,GAAjB;AAAsBE,UAAAA,GAAG,EAAEJ,IAAI,CAACG,IAAL,CAAUC;AAArC,SAFR;AAGE,QAAA,IAAI,EAAEJ,IAAI,CAACK,EAHb;AAIE,QAAA,QAAQ,EAAEf,IAAI,CAACgB,eAJjB;AAKE,QAAA,IAAI,EAAC,OALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADU;AAAA,KAFd;AAWE,IAAA,YAAY,EAAE,sBAACN,IAAD,EAAOO,KAAP;AAAA,aAAiBP,IAAI,GAAGO,KAAxB;AAAA,KAXhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADG,GAeH,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBA5BJ,CAJF,CADF;AAsCD,CAzCD;;AA0CA,eAAepB,gBAAf","sourcesContent":["import React, { useContext } from \"react\";\r\nimport {\r\n  Dimensions,\r\n  ImageBackground,\r\n  FlatList,\r\n  View,\r\n  Text,\r\n} from \"react-native\";\r\nimport { Context } from \"../context/Context\";\r\nimport Item from \"../components/Item\";\r\nconst height = Dimensions.get(\"window\").height - 10;\r\nconst width = Dimensions.get(\"window\").width;\r\n\r\nconst PredictionScreen = () => {\r\n  const { weatherData, active } = useContext(Context);\r\n  const data = weatherData[active] ? weatherData[active].data : undefined;\r\n  return (\r\n    <ImageBackground\r\n      source={{ uri: \"http://picsum.photos/720/540?blur=1\" }}\r\n      style={{ height: height, width: width }}\r\n    >\r\n      <View>\r\n        <Text\r\n          style={{\r\n            backgroundColor: \"rgba(220, 220, 220, 0.4)\",\r\n            color: \"#19C3FB\",\r\n            fontSize: 26,\r\n            fontWeight: \"bold\",\r\n            textAlign: \"center\",\r\n            textAlignVertical: \"center\",\r\n          }}\r\n        >\r\n          Predictions\r\n        </Text>\r\n        {data ? (\r\n          <FlatList\r\n            data={data.daily}\r\n            renderItem={({ item }) => (\r\n              <Item\r\n                weather={item.weather[0]}\r\n                temp={{ min: item.temp.min, max: item.temp.max }}\r\n                time={item.dt}\r\n                timezone={data.timezone_offset}\r\n                type=\"daily\"\r\n              />\r\n            )}\r\n            keyExtractor={(item, index) => item + index}\r\n          />\r\n        ) : (\r\n          <Text>No data found</Text>\r\n        )}\r\n      </View>\r\n    </ImageBackground>\r\n  );\r\n};\r\nexport default PredictionScreen;\r\n"]},"metadata":{},"sourceType":"module"}