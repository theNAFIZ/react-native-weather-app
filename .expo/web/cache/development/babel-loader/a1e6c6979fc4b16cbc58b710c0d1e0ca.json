{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Node.Js\\\\React Native\\\\weather\\\\app\\\\components\\\\Report.js\";\nimport React, { useEffect, useContext, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport useApi from \"../api/useApi\";\nimport api from \"../api/weather\";\nimport colors from \"../config/colors\";\nimport { Context } from \"../context/Context\";\n\nfunction Report() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      pip = _useState2[0],\n      setpip = _useState2[1];\n\n  useEffect(function () {\n    eff(city);\n  }, [city]);\n\n  var _useContext = useContext(Context),\n      loading = _useContext.loading,\n      error = _useContext.error,\n      cityData = _useContext.cityData,\n      city = _useContext.city,\n      getCity = _useContext.getCity;\n\n  var eff = function eff(city) {\n    return _regeneratorRuntime.async(function eff$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(getCity(city));\n\n          case 2:\n            console.log(\"effect\");\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(React.Fragment, null, loading ? React.createElement(ActivityIndicator, {\n    animating: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }) : React.createElement(React.Fragment, null, error && React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 21\n    }\n  }, \"Error Found!!\"), React.createElement(Text, {\n    style: styles.h1,\n    onPress: function onPress() {\n      return setpip(!pip);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }\n  }, loading, \"+\", error, \"+\", pip ? \"Yes\" : \"No\"), pip && React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.location,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 15\n    }\n  }, cityData.name, \", \", cityData.sys.country), React.createElement(Image, {\n    style: styles.image,\n    source: {\n      uri: \"http://openweathermap.org/img/wn/\" + cityData.weather[0].icon + \".png\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 15\n    }\n  }), React.createElement(Text, {\n    style: styles.h3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 15\n    }\n  }, cityData.weather[0].description), React.createElement(Text, {\n    style: styles.h1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 15\n    }\n  }, Math.round(cityData.main.temp - 273), \"\\xB0C\"))));\n}\n\nexport default Report;\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: colors.dark,\n    height: \"100%\",\n    width: \"100%\"\n  },\n  h1: {\n    fontSize: 60,\n    color: colors.text\n  },\n  h3: {\n    fontSize: 40,\n    color: colors.text\n  },\n  location: {\n    fontSize: 40,\n    color: colors.text,\n    fontWeight: \"600\"\n  },\n  image: {\n    height: 90,\n    width: 90\n  }\n});","map":{"version":3,"sources":["D:/Node.Js/React Native/weather/app/components/Report.js"],"names":["React","useEffect","useContext","useState","useApi","api","colors","Context","Report","pip","setpip","eff","city","loading","error","cityData","getCity","console","log","styles","h1","container","location","name","sys","country","image","uri","weather","icon","h3","description","Math","round","main","temp","StyleSheet","create","alignItems","justifyContent","backgroundColor","dark","height","width","fontSize","color","text","fontWeight"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext, useState } from \"react\";\r\nimport { StyleSheet, View, Text, Image, ActivityIndicator } from \"react-native\";\r\nimport useApi from \"../api/useApi\";\r\nimport api from \"../api/weather\";\r\nimport colors from \"../config/colors\";\r\nimport { Context } from \"../context/Context\";\r\n\r\nfunction Report() {\r\n  const [pip, setpip] = useState(false);\r\n  useEffect(() => {\r\n    eff(city);\r\n  }, [city]);\r\n  let { loading, error, cityData, city, getCity } = useContext(Context);\r\n\r\n  const eff = async (city) => {\r\n    await getCity(city);\r\n    console.log(\"effect\");\r\n  };\r\n  //   const { data, error, loading, request } = useApi(api.getCurrent);\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <ActivityIndicator animating={loading} />\r\n      ) : (\r\n        <>\r\n          {error && <Text>Error Found!!</Text>}\r\n          <Text style={styles.h1} onPress={() => setpip(!pip)}>\r\n            {loading}+{error}+{pip ? \"Yes\" : \"No\"}\r\n          </Text>\r\n          {pip && (\r\n            <View style={styles.container}>\r\n              <Text style={styles.location}>\r\n                {cityData.name}, {cityData.sys.country}\r\n              </Text>\r\n              <Image\r\n                style={styles.image}\r\n                source={{\r\n                  uri: `http://openweathermap.org/img/wn/${cityData.weather[0].icon}.png`,\r\n                }}\r\n              />\r\n              <Text style={styles.h3}>{cityData.weather[0].description}</Text>\r\n              <Text style={styles.h1}>\r\n                {Math.round(cityData.main.temp - 273)}Â°C\r\n              </Text>\r\n            </View>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Report;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    backgroundColor: colors.dark,\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n  },\r\n  h1: {\r\n    fontSize: 60,\r\n    color: colors.text,\r\n  },\r\n  h3: {\r\n    fontSize: 40,\r\n    color: colors.text,\r\n  },\r\n  location: {\r\n    fontSize: 40,\r\n    color: colors.text,\r\n    fontWeight: \"600\",\r\n  },\r\n  image: {\r\n    height: 90,\r\n    width: 90,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}