{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Node.Js\\\\React Native\\\\weather\\\\app\\\\screens\\\\HomeScreen.js\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport Report from \"../components/Report\";\nimport Header from \"../components/Header\";\nimport { Context } from \"../context/Context\";\nimport MenuScreen from \"./MenuScreen\";\nimport PredictionScreen from \"./PredictionScreen\";\nexport default function HomeScreen() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      refreshing = _useState2[0],\n      setRefreshing = _useState2[1];\n\n  var _useContext = useContext(Context),\n      list = _useContext.list,\n      city = _useContext.city,\n      dataFromCity = _useContext.dataFromCity,\n      listLocations = _useContext.listLocations;\n\n  useEffect(function () {\n    eff();\n  }, [city]);\n\n  var eff = function eff() {\n    return _regeneratorRuntime.async(function eff$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setRefreshing(true);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(dataFromCity(city));\n\n          case 3:\n            listLocations();\n            setRefreshing(false);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(PredictionScreen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["D:/Node.Js/React Native/weather/app/screens/HomeScreen.js"],"names":["React","useState","useEffect","useContext","Report","Header","Context","MenuScreen","PredictionScreen","HomeScreen","refreshing","setRefreshing","list","city","dataFromCity","listLocations","eff"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;;;;AAEA,OAAOC,MAAP;AACA,OAAOC,MAAP;AACA,SAASC,OAAT;AACA,OAAOC,UAAP;AACA,OAAOC,gBAAP;AAEA,eAAe,SAASC,UAAT,GAAsB;AAAA,kBACCR,QAAQ,CAAC,KAAD,CADT;AAAA;AAAA,MAC5BS,UAD4B;AAAA,MAChBC,aADgB;;AAAA,oBAEiBR,UAAU,CAACG,OAAD,CAF3B;AAAA,MAE3BM,IAF2B,eAE3BA,IAF2B;AAAA,MAErBC,IAFqB,eAErBA,IAFqB;AAAA,MAEfC,YAFe,eAEfA,YAFe;AAAA,MAEDC,aAFC,eAEDA,aAFC;;AAGnCb,EAAAA,SAAS,CAAC,YAAM;AACdc,IAAAA,GAAG;AACJ,GAFQ,EAEN,CAACH,IAAD,CAFM,CAAT;;AAGA,MAAMG,GAAG,GAAG,SAANA,GAAM;AAAA;AAAA;AAAA;AAAA;AACVL,YAAAA,aAAa,CAAC,IAAD,CAAb;AADU;AAAA,6CAEJG,YAAY,CAACD,IAAD,CAFR;;AAAA;AAGVE,YAAAA,aAAa;AACbJ,YAAAA,aAAa,CAAC,KAAD,CAAb;;AAJU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ;;AAMA,SAcE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF;AAgBD","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport { ImageBackground, ScrollView, RefreshControl } from \"react-native\";\r\nimport Report from \"../components/Report\";\r\nimport Header from \"../components/Header\";\r\nimport { Context } from \"../context/Context\";\r\nimport MenuScreen from \"./MenuScreen\";\r\nimport PredictionScreen from \"./PredictionScreen\";\r\n\r\nexport default function HomeScreen() {\r\n  const [refreshing, setRefreshing] = useState(false);\r\n  const { list, city, dataFromCity, listLocations } = useContext(Context);\r\n  useEffect(() => {\r\n    eff();\r\n  }, [city]);\r\n  const eff = async () => {\r\n    setRefreshing(true);\r\n    await dataFromCity(city);\r\n    listLocations();\r\n    setRefreshing(false);\r\n  };\r\n  return (\r\n    // <ImageBackground\r\n    //   source={{ uri: \"http://picsum.photos/720/540?blur=3\" }}\r\n    //   style={{ height: \"100%\", width: \"100%\", opacity: 0.7 }}\r\n    // >\r\n    //   <Header />\r\n    //   <ScrollView\r\n    //     refreshControl={\r\n    //       <RefreshControl refreshing={refreshing} onRefresh={eff} />\r\n    //     }\r\n    //   >\r\n    //     <Report />\r\n    //   </ScrollView>\r\n    // </ImageBackground>\r\n    <PredictionScreen />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}