{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport settings from \"../config/settings\";\nimport apiClient from \"./client\";\n\nvar getCity = function getCity(city) {\n  var current, onecall;\n  return _regeneratorRuntime.async(function getCity$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(apiClient.get(\"weather?q=\" + city + \"&appid=\" + settings.apiKey));\n\n        case 3:\n          current = _context.sent;\n\n          if (!(current.data.cod !== 200)) {\n            _context.next = 6;\n            break;\n          }\n\n          return _context.abrupt(\"return\");\n\n        case 6:\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(getPredictionCoords(current.data.coord.lat, current.data.coord.lon));\n\n        case 8:\n          onecall = _context.sent;\n          return _context.abrupt(\"return\", {\n            city: current.data.name,\n            data: onecall.data\n          });\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          return _context.abrupt(\"return\");\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 12]], Promise);\n};\n\nvar getCoords = function getCoords(lat, lon) {\n  return apiClient.get(\"weather?lat=\" + lat + \"&lon=\" + lon + \"&appid=\" + settings.apiKey);\n};\n\nvar getPredictionCoords = function getPredictionCoords(lat, lon) {\n  return apiClient.get(\"onecall?lat=\" + lat + \"&lon=\" + lon + \"&appid=\" + settings.apiKey);\n};\n\nexport default {\n  getCity: getCity,\n  getCoords: getCoords,\n  getPredictionCoords: getPredictionCoords\n};","map":{"version":3,"sources":["D:/Node.Js/React Native/weather/app/api/weather.js"],"names":["settings","apiClient","getCity","city","get","apiKey","current","data","cod","getPredictionCoords","coord","lat","lon","onecall","name","console","log","getCoords"],"mappings":";AAAA,OAAOA,QAAP;AACA,OAAOC,SAAP;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEUF,SAAS,CAACG,GAAV,gBACPD,IADO,eACOH,QAAQ,CAACK,MADhB,CAFV;;AAAA;AAENC,UAAAA,OAFM;;AAAA,gBAKRA,OAAO,CAACC,IAAR,CAAaC,GAAb,KAAqB,GALb;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,2CAQUC,mBAAmB,CACvCH,OAAO,CAACC,IAAR,CAAaG,KAAb,CAAmBC,GADoB,EAEvCL,OAAO,CAACC,IAAR,CAAaG,KAAb,CAAmBE,GAFoB,CAR7B;;AAAA;AAQNC,UAAAA,OARM;AAAA,2CAYL;AAAEV,YAAAA,IAAI,EAAEG,OAAO,CAACC,IAAR,CAAaO,IAArB;AAA2BP,YAAAA,IAAI,EAAEM,OAAO,CAACN;AAAzC,WAZK;;AAAA;AAAA;AAAA;AAcZQ,UAAAA,OAAO,CAACC,GAAR;AAdY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB;;AAmBA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACN,GAAD,EAAMC,GAAN;AAAA,SAChBX,SAAS,CAACG,GAAV,kBAA6BO,GAA7B,aAAwCC,GAAxC,eAAqDZ,QAAQ,CAACK,MAA9D,CADgB;AAAA,CAAlB;;AAGA,IAAMI,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACE,GAAD,EAAMC,GAAN;AAAA,SAC1BX,SAAS,CAACG,GAAV,kBAA6BO,GAA7B,aAAwCC,GAAxC,eAAqDZ,QAAQ,CAACK,MAA9D,CAD0B;AAAA,CAA5B;;AAGA,eAAe;AAAEH,EAAAA,OAAO,EAAPA,OAAF;AAAWe,EAAAA,SAAS,EAATA,SAAX;AAAsBR,EAAAA,mBAAmB,EAAnBA;AAAtB,CAAf","sourcesContent":["import settings from \"../config/settings\";\r\nimport apiClient from \"./client\";\r\n\r\nconst getCity = async (city) => {\r\n  try {\r\n    const current = await apiClient.get(\r\n      `weather?q=${city}&appid=${settings.apiKey}`\r\n    );\r\n    if (current.data.cod !== 200) {\r\n      return;\r\n    }\r\n    const onecall = await getPredictionCoords(\r\n      current.data.coord.lat,\r\n      current.data.coord.lon\r\n    );\r\n    return { city: current.data.name, data: onecall.data };\r\n  } catch (err) {\r\n    console.log(err);\r\n    return;\r\n  }\r\n};\r\n\r\nconst getCoords = (lat, lon) =>\r\n  apiClient.get(`weather?lat=${lat}&lon=${lon}&appid=${settings.apiKey}`);\r\n\r\nconst getPredictionCoords = (lat, lon) =>\r\n  apiClient.get(`onecall?lat=${lat}&lon=${lon}&appid=${settings.apiKey}`);\r\n\r\nexport default { getCity, getCoords, getPredictionCoords };\r\n"]},"metadata":{},"sourceType":"module"}