{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport weatherApi from \"../api/weather\";\nexport var SET_CITY = \"SET_CITY\";\nexport var GET_CITY_DATA = \"GET_CITY_DATA\";\nexport var GET_PREDICTION_CITY = \"GET_PREDICTION_CITY\";\nexport var SET_COORDS = \"GET_COORDS\";\nexport var GET_COORDS_DATA = \"GET_COORDS_DATA\";\nexport var GET_PREDICTION_COORDS = \"GET_PREDICTION_COORDS\";\nexport var ERROR = \"ERROR\";\nexport var createActions = function createActions(dispatch) {\n  return {\n    setCity: function setCity(formData) {\n      dispatch({\n        type: SET_CITY,\n        payload: formData\n      });\n    },\n    setCoords: function setCoords() {\n      try {\n        dispatch({\n          type: SET_COORDS,\n          payload: {\n            lat: 0,\n            lon: 0\n          }\n        });\n      } catch (error) {\n        console.log(error);\n        dispatch({\n          type: ERROR,\n          payload: \"Couldn't get current location of your device\"\n        });\n      }\n    },\n    getCity: function getCity(loc) {\n      var wData;\n      return _regeneratorRuntime.async(function getCity$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(weatherApi.getCity(loc));\n\n            case 3:\n              wData = _context.sent;\n\n              if (wData.cod !== 200) {\n                dispatch({\n                  type: ERROR,\n                  payload: \"Corrupted Response\"\n                });\n              } else {\n                dispatch({\n                  type: GET_CITY_DATA,\n                  payload: wData\n                });\n              }\n\n              _context.next = 11;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n              dispatch({\n                type: ERROR,\n                payload: \"Error\"\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    },\n    getCoords: function getCoords(_ref) {\n      var lat, lon, wData;\n      return _regeneratorRuntime.async(function getCoords$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              lat = _ref.lat, lon = _ref.lon;\n              _context2.prev = 1;\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(weatherApi.getCoords(lat, lon));\n\n            case 4:\n              wData = _context2.sent;\n\n              if (wData.cod !== 200) {\n                dispatch({\n                  type: ERROR,\n                  payload: \"Corrupted Response\"\n                });\n              } else {\n                dispatch({\n                  type: GET_COORDS_DATA,\n                  payload: wData.data\n                });\n              }\n\n              _context2.next = 12;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log(_context2.t0);\n              dispatch({\n                type: ERROR,\n                payload: \"Error\"\n              });\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[1, 8]], Promise);\n    },\n    getPredictionCity: function getPredictionCity(loc) {\n      var wData;\n      return _regeneratorRuntime.async(function getPredictionCity$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(weatherApi.getCityPrediction(loc));\n\n            case 3:\n              wData = _context3.sent;\n\n              if (wData.cod !== 200) {\n                dispatch({\n                  type: ERROR,\n                  payload: \"Corrupted Response\"\n                });\n              } else {\n                dispatch({\n                  type: GET_PREDICTION_CITY,\n                  payload: wData.data\n                });\n              }\n\n              _context3.next = 11;\n              break;\n\n            case 7:\n              _context3.prev = 7;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.log(_context3.t0);\n              dispatch({\n                type: ERROR,\n                payload: \"Error\"\n              });\n\n            case 11:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    },\n    getPredictionCoords: function getPredictionCoords(lat, lon) {\n      var wData;\n      return _regeneratorRuntime.async(function getPredictionCoords$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return _regeneratorRuntime.awrap(weatherApi.getPredictionCoords(lat, lon));\n\n            case 3:\n              wData = _context4.sent;\n\n              if (wData.cod !== 200) {\n                dispatch({\n                  type: ERROR,\n                  payload: \"Corrupted Response\"\n                });\n              } else {\n                dispatch({\n                  type: GET_PREDICTION_COORDS,\n                  payload: wData.data\n                });\n              }\n\n              _context4.next = 11;\n              break;\n\n            case 7:\n              _context4.prev = 7;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.log(_context4.t0);\n              dispatch({\n                type: ERROR,\n                payload: \"Error\"\n              });\n\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    }\n  };\n};","map":{"version":3,"sources":["D:/Node.Js/React Native/weather/app/context/actions.js"],"names":["weatherApi","SET_CITY","GET_CITY_DATA","GET_PREDICTION_CITY","SET_COORDS","GET_COORDS_DATA","GET_PREDICTION_COORDS","ERROR","createActions","dispatch","setCity","formData","type","payload","setCoords","lat","lon","error","console","log","getCity","loc","wData","cod","getCoords","data","getPredictionCity","getCityPrediction","getPredictionCoords"],"mappings":"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","sourcesContent":["import weatherApi from \"../api/weather\";\r\n\r\nexport const SET_CITY = \"SET_CITY\";\r\nexport const GET_CITY_DATA = \"GET_CITY_DATA\";\r\nexport const GET_PREDICTION_CITY = \"GET_PREDICTION_CITY\";\r\nexport const SET_COORDS = \"GET_COORDS\";\r\nexport const GET_COORDS_DATA = \"GET_COORDS_DATA\";\r\nexport const GET_PREDICTION_COORDS = \"GET_PREDICTION_COORDS\";\r\nexport const ERROR = \"ERROR\";\r\n\r\nexport const createActions = (dispatch) => ({\r\n  setCity: (formData) => {\r\n    dispatch({\r\n      type: SET_CITY,\r\n      payload: formData,\r\n    });\r\n  },\r\n  setCoords: () => {\r\n    try {\r\n      //Get Coords from phone\r\n      dispatch({\r\n        type: SET_COORDS,\r\n        payload: { lat: 0, lon: 0 }, //coords lat, lon\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      //Error\r\n      dispatch({\r\n        type: ERROR,\r\n        payload: \"Couldn't get current location of your device\",\r\n      });\r\n    }\r\n  },\r\n\r\n  getCity: async (loc) => {\r\n    try {\r\n      const wData = await weatherApi.getCity(loc);\r\n      if (wData.cod !== 200) {\r\n        dispatch({\r\n          type: ERROR,\r\n          payload: \"Corrupted Response\",\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: GET_CITY_DATA,\r\n          payload: wData,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch({\r\n        type: ERROR,\r\n        payload: \"Error\",\r\n      });\r\n    }\r\n  },\r\n\r\n  getCoords: async ({ lat, lon }) => {\r\n    try {\r\n      const wData = await weatherApi.getCoords(lat, lon);\r\n      if (wData.cod !== 200) {\r\n        dispatch({\r\n          type: ERROR,\r\n          payload: \"Corrupted Response\",\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: GET_COORDS_DATA,\r\n          payload: wData.data,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch({\r\n        type: ERROR,\r\n        payload: \"Error\",\r\n      });\r\n    }\r\n  },\r\n  getPredictionCity: async (loc) => {\r\n    try {\r\n      const wData = await weatherApi.getCityPrediction(loc);\r\n      if (wData.cod !== 200) {\r\n        dispatch({\r\n          type: ERROR,\r\n          payload: \"Corrupted Response\",\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: GET_PREDICTION_CITY,\r\n          payload: wData.data,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch({\r\n        type: ERROR,\r\n        payload: \"Error\",\r\n      });\r\n    }\r\n  },\r\n  getPredictionCoords: async (lat, lon) => {\r\n    try {\r\n      const wData = await weatherApi.getPredictionCoords(lat, lon);\r\n      if (wData.cod !== 200) {\r\n        dispatch({\r\n          type: ERROR,\r\n          payload: \"Corrupted Response\",\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: GET_PREDICTION_COORDS,\r\n          payload: wData.data,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch({\r\n        type: ERROR,\r\n        payload: \"Error\",\r\n      });\r\n    }\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}