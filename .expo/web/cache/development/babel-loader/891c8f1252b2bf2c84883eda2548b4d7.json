{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport weatherApi from \"../api/weather\";\nexport var SET_CITY = \"SET_CITY\";\nexport var SET_HOME = \"SET_HOME\";\nexport var SET_COORDS = \"SET_COORDS\";\nexport var SET_ACTIVE = \"SET_ACTIVE\";\nexport var DATA_CITY = \"DATA_CITY\";\nexport var DATA_COORD = \"DATA_COORD\";\nexport var LIST_LOCATIONS = \"LIST_LOCATIONS\";\nexport var ERROR = \"ERROR\";\nexport var createActions = function createActions(dispatch) {\n  return {\n    listLocations: function listLocations() {\n      dispatch({\n        type: LIST_LOCATIONS\n      });\n    },\n    setHome: function setHome(city) {\n      dispatch({\n        type: SET_HOME,\n        payload: city\n      });\n    },\n    setActive: function setActive(city) {\n      dispatch({\n        type: SET_ACTIVE,\n        payload: city\n      });\n    },\n    setCity: function setCity(formData) {\n      dispatch({\n        type: SET_CITY,\n        payload: formData\n      });\n    },\n    setCoords: function setCoords(coord) {\n      try {\n        dispatch({\n          type: SET_COORDS,\n          payload: {\n            lat: coord.lat,\n            lon: coord.lon\n          }\n        });\n      } catch (error) {\n        console.log(error);\n        dispatch({\n          type: ERROR,\n          payload: \"Couldn't get current location of your device\"\n        });\n      }\n    },\n    dataFromCity: function dataFromCity(city) {\n      var wData;\n      return _regeneratorRuntime.async(function dataFromCity$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(weatherApi.getCity(city));\n\n            case 3:\n              wData = _context.sent;\n\n              if (!wData || !wData.data || !wData.data.current) {\n                dispatch({\n                  type: ERROR,\n                  payload: \"Corrupted Response dfct\"\n                });\n              } else {\n                dispatch({\n                  type: DATA_CITY,\n                  payload: wData\n                });\n              }\n\n              _context.next = 11;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n              dispatch({\n                type: ERROR,\n                payload: \"data from city error\"\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    },\n    dataFromCoords: function dataFromCoords(_ref) {\n      var lat, lon, wData;\n      return _regeneratorRuntime.async(function dataFromCoords$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              lat = _ref.lat, lon = _ref.lon;\n              _context2.prev = 1;\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(weatherApi.getCoords(lat, lon));\n\n            case 4:\n              wData = _context2.sent;\n\n              if (!wData || !wData.data || !wData.data.current) {\n                dispatch({\n                  type: ERROR,\n                  payload: \"Corrupted Response dfco\"\n                });\n              } else {\n                dispatch({\n                  type: DATA_COORD,\n                  payload: wData\n                });\n              }\n\n              _context2.next = 12;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log(_context2.t0);\n              dispatch({\n                type: ERROR,\n                payload: \"data from coords error\"\n              });\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[1, 8]], Promise);\n    }\n  };\n};","map":{"version":3,"sources":["D:/Node.Js/React Native/weather/app/context/actions.js"],"names":["weatherApi","SET_CITY","SET_HOME","SET_COORDS","SET_ACTIVE","DATA_CITY","DATA_COORD","LIST_LOCATIONS","ERROR","createActions","dispatch","listLocations","type","setHome","city","payload","setActive","setCity","formData","setCoords","coord","lat","lon","error","console","log","dataFromCity","getCity","wData","data","current","dataFromCoords","getCoords"],"mappings":";AAAA,OAAOA,UAAP;AAEA,OAAO,IAAMC,QAAQ,GAAG,UAAjB;AACP,OAAO,IAAMC,QAAQ,GAAG,UAAjB;AACP,OAAO,IAAMC,UAAU,GAAG,YAAnB;AACP,OAAO,IAAMC,UAAU,GAAG,YAAnB;AACP,OAAO,IAAMC,SAAS,GAAG,WAAlB;AACP,OAAO,IAAMC,UAAU,GAAG,YAAnB;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,KAAK,GAAG,OAAd;AAEP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD;AAAA,SAAe;AAC1CC,IAAAA,aAAa,EAAE,yBAAM;AACnBD,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEL;AADC,OAAD,CAAR;AAGD,KALyC;AAO1CM,IAAAA,OAAO,EAAE,iBAACC,IAAD,EAAU;AACjBJ,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEV,QADC;AAEPa,QAAAA,OAAO,EAAED;AAFF,OAAD,CAAR;AAID,KAZyC;AAc1CE,IAAAA,SAAS,EAAE,mBAACF,IAAD,EAAU;AACnBJ,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAER,UADC;AAEPW,QAAAA,OAAO,EAAED;AAFF,OAAD,CAAR;AAID,KAnByC;AAqB1CG,IAAAA,OAAO,EAAE,iBAACC,QAAD,EAAc;AACrBR,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEX,QADC;AAEPc,QAAAA,OAAO,EAAEG;AAFF,OAAD,CAAR;AAID,KA1ByC;AA4B1CC,IAAAA,SAAS,EAAE,mBAACC,KAAD,EAAW;AACpB,UAAI;AACFV,QAAAA,QAAQ,CAAC;AACPE,UAAAA,IAAI,EAAET,UADC;AAEPY,UAAAA,OAAO,EAAE;AAAEM,YAAAA,GAAG,EAAED,KAAK,CAACC,GAAb;AAAkBC,YAAAA,GAAG,EAAEF,KAAK,CAACE;AAA7B;AAFF,SAAD,CAAR;AAID,OALD,CAKE,OAAOC,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAEAb,QAAAA,QAAQ,CAAC;AACPE,UAAAA,IAAI,EAAEJ,KADC;AAEPO,UAAAA,OAAO,EAAE;AAFF,SAAD,CAAR;AAID;AACF,KA1CyC;AA4C1CW,IAAAA,YAAY,EAAE,sBAAOZ,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEUd,UAAU,CAAC2B,OAAX,CAAmBb,IAAnB,CAFV;;AAAA;AAEJc,cAAAA,KAFI;;AAGV,kBAAI,CAACA,KAAD,IAAU,CAACA,KAAK,CAACC,IAAjB,IAAyB,CAACD,KAAK,CAACC,IAAN,CAAWC,OAAzC,EAAkD;AAChDpB,gBAAAA,QAAQ,CAAC;AACPE,kBAAAA,IAAI,EAAEJ,KADC;AAEPO,kBAAAA,OAAO,EAAE;AAFF,iBAAD,CAAR;AAID,eALD,MAKO;AACLL,gBAAAA,QAAQ,CAAC;AACPE,kBAAAA,IAAI,EAAEP,SADC;AAEPU,kBAAAA,OAAO,EAAEa;AAFF,iBAAD,CAAR;AAID;;AAbS;AAAA;;AAAA;AAAA;AAAA;AAeVJ,cAAAA,OAAO,CAACD,KAAR;AACAb,cAAAA,QAAQ,CAAC;AACPE,gBAAAA,IAAI,EAAEJ,KADC;AAEPO,gBAAAA,OAAO,EAAE;AAFF,eAAD,CAAR;;AAhBU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5C4B;AAmE1CgB,IAAAA,cAAc,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAASV,cAAAA,GAAT,QAASA,GAAT,EAAcC,GAAd,QAAcA,GAAd;AAAA;AAAA;AAAA,+CAEQtB,UAAU,CAACgC,SAAX,CAAqBX,GAArB,EAA0BC,GAA1B,CAFR;;AAAA;AAENM,cAAAA,KAFM;;AAGZ,kBAAI,CAACA,KAAD,IAAU,CAACA,KAAK,CAACC,IAAjB,IAAyB,CAACD,KAAK,CAACC,IAAN,CAAWC,OAAzC,EAAkD;AAChDpB,gBAAAA,QAAQ,CAAC;AACPE,kBAAAA,IAAI,EAAEJ,KADC;AAEPO,kBAAAA,OAAO,EAAE;AAFF,iBAAD,CAAR;AAID,eALD,MAKO;AACLL,gBAAAA,QAAQ,CAAC;AACPE,kBAAAA,IAAI,EAAEN,UADC;AAEPS,kBAAAA,OAAO,EAAEa;AAFF,iBAAD,CAAR;AAID;;AAbW;AAAA;;AAAA;AAAA;AAAA;AAeZJ,cAAAA,OAAO,CAACC,GAAR;AACAf,cAAAA,QAAQ,CAAC;AACPE,gBAAAA,IAAI,EAAEJ,KADC;AAEPO,gBAAAA,OAAO,EAAE;AAFF,eAAD,CAAR;;AAhBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAnE0B,GAAf;AAAA,CAAtB","sourcesContent":["import weatherApi from \"../api/weather\";\r\n\r\nexport const SET_CITY = \"SET_CITY\";\r\nexport const SET_HOME = \"SET_HOME\";\r\nexport const SET_COORDS = \"SET_COORDS\";\r\nexport const SET_ACTIVE = \"SET_ACTIVE\";\r\nexport const DATA_CITY = \"DATA_CITY\";\r\nexport const DATA_COORD = \"DATA_COORD\";\r\nexport const LIST_LOCATIONS = \"LIST_LOCATIONS\";\r\nexport const ERROR = \"ERROR\";\r\n\r\nexport const createActions = (dispatch) => ({\r\n  listLocations: () => {\r\n    dispatch({\r\n      type: LIST_LOCATIONS,\r\n    });\r\n  },\r\n\r\n  setHome: (city) => {\r\n    dispatch({\r\n      type: SET_HOME,\r\n      payload: city,\r\n    });\r\n  },\r\n\r\n  setActive: (city) => {\r\n    dispatch({\r\n      type: SET_ACTIVE,\r\n      payload: city,\r\n    });\r\n  },\r\n\r\n  setCity: (formData) => {\r\n    dispatch({\r\n      type: SET_CITY,\r\n      payload: formData,\r\n    });\r\n  },\r\n\r\n  setCoords: (coord) => {\r\n    try {\r\n      dispatch({\r\n        type: SET_COORDS,\r\n        payload: { lat: coord.lat, lon: coord.lon }, //coords lat, lon\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      //Error\r\n      dispatch({\r\n        type: ERROR,\r\n        payload: \"Couldn't get current location of your device\",\r\n      });\r\n    }\r\n  },\r\n\r\n  dataFromCity: async (city) => {\r\n    try {\r\n      const wData = await weatherApi.getCity(city);\r\n      if (!wData || !wData.data || !wData.data.current) {\r\n        dispatch({\r\n          type: ERROR,\r\n          payload: \"Corrupted Response dfct\",\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: DATA_CITY,\r\n          payload: wData,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      dispatch({\r\n        type: ERROR,\r\n        payload: \"data from city error\",\r\n      });\r\n    }\r\n  },\r\n\r\n  dataFromCoords: async ({ lat, lon }) => {\r\n    try {\r\n      const wData = await weatherApi.getCoords(lat, lon);\r\n      if (!wData || !wData.data || !wData.data.current) {\r\n        dispatch({\r\n          type: ERROR,\r\n          payload: \"Corrupted Response dfco\",\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: DATA_COORD,\r\n          payload: wData,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch({\r\n        type: ERROR,\r\n        payload: \"data from coords error\",\r\n      });\r\n    }\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}