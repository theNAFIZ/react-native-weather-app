{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SET_CITY, SET_COORDS, GET_CITY_DATA, GET_COORDS_DATA, GET_PREDICTION_CITY, GET_PREDICTION_COORDS, ERROR } from \"./actions\";\nexport default function (state, action) {\n  var type = action.type,\n      payload = action.payload;\n\n  switch (type) {\n    case SET_CITY:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        city: payload,\n        loading: false\n      });\n\n    case SET_COORDS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        coords: {\n          lat: payload.lat,\n          lon: payload.lon\n        },\n        loading: false\n      });\n\n    case GET_CITY_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        cityData: payload,\n        loading: false\n      });\n\n    case GET_COORDS_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        coordsData: payload,\n        loading: false\n      });\n\n    case GET_PREDICTION_CITY:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        cityPred: payload,\n        loading: false\n      });\n\n    case GET_PREDICTION_COORDS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        coordsPred: payload,\n        loading: false\n      });\n\n    case ERROR:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: false,\n          error: true,\n          errors: errors.push(payload)\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["D:/Node.Js/React Native/weather/app/context/reducers.js"],"names":["SET_CITY","SET_COORDS","GET_CITY_DATA","GET_COORDS_DATA","GET_PREDICTION_CITY","GET_PREDICTION_COORDS","ERROR","state","action","type","payload","city","loading","coords","lat","lon","cityData","coordsData","cityPred","coordsPred","error","errors","push"],"mappings":";;;;;;AAAA,SACEA,QADF,EAEEC,UAFF,EAGEC,aAHF,EAIEC,eAJF,EAKEC,mBALF,EAMEC,qBANF,EAOEC,KAPF;AAUA,eAAe,UAAUC,KAAV,EAAiBC,MAAjB,EAAyB;AAAA,MAC9BC,IAD8B,GACZD,MADY,CAC9BC,IAD8B;AAAA,MACxBC,OADwB,GACZF,MADY,CACxBE,OADwB;;AAEtC,UAAQD,IAAR;AACE,SAAKT,QAAL;AACE,6CACKO,KADL;AAEEI,QAAAA,IAAI,EAAED,OAFR;AAGEE,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKX,UAAL;AACE,6CACKM,KADL;AAEEM,QAAAA,MAAM,EAAE;AAAEC,UAAAA,GAAG,EAAEJ,OAAO,CAACI,GAAf;AAAoBC,UAAAA,GAAG,EAAEL,OAAO,CAACK;AAAjC,SAFV;AAGEH,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKV,aAAL;AACE,6CACKK,KADL;AAEES,QAAAA,QAAQ,EAAEN,OAFZ;AAGEE,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKT,eAAL;AACE,6CACKI,KADL;AAEEU,QAAAA,UAAU,EAAEP,OAFd;AAGEE,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKR,mBAAL;AACE,6CACKG,KADL;AAEEW,QAAAA,QAAQ,EAAER,OAFZ;AAGEE,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKP,qBAAL;AACE,6CACKE,KADL;AAEEY,QAAAA,UAAU,EAAET,OAFd;AAGEE,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKN,KAAL;AAAY;AACV,+CACKC,KADL;AAEEK,UAAAA,OAAO,EAAE,KAFX;AAGEQ,UAAAA,KAAK,EAAE,IAHT;AAIEC,UAAAA,MAAM,EAAEA,MAAM,CAACC,IAAP,CAAYZ,OAAZ;AAJV;AAMD;;AACD;AACE,aAAOH,KAAP;AA9CJ;AAgDD","sourcesContent":["import {\r\n  SET_CITY,\r\n  SET_COORDS,\r\n  GET_CITY_DATA,\r\n  GET_COORDS_DATA,\r\n  GET_PREDICTION_CITY,\r\n  GET_PREDICTION_COORDS,\r\n  ERROR,\r\n} from \"./actions\";\r\n\r\nexport default function (state, action) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case SET_CITY:\r\n      return {\r\n        ...state,\r\n        city: payload,\r\n        loading: false,\r\n      };\r\n    case SET_COORDS:\r\n      return {\r\n        ...state,\r\n        coords: { lat: payload.lat, lon: payload.lon },\r\n        loading: false,\r\n      };\r\n    case GET_CITY_DATA:\r\n      return {\r\n        ...state,\r\n        cityData: payload,\r\n        loading: false,\r\n      };\r\n    case GET_COORDS_DATA:\r\n      return {\r\n        ...state,\r\n        coordsData: payload,\r\n        loading: false,\r\n      };\r\n    case GET_PREDICTION_CITY:\r\n      return {\r\n        ...state,\r\n        cityPred: payload,\r\n        loading: false,\r\n      };\r\n    case GET_PREDICTION_COORDS:\r\n      return {\r\n        ...state,\r\n        coordsPred: payload,\r\n        loading: false,\r\n      };\r\n    case ERROR: {\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: true,\r\n        errors: errors.push(payload),\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}