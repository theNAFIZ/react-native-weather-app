{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport settings from \"../config/settings\";\nimport apiClient from \"./client\";\n\nvar getCity = function getCity(city) {\n  var response;\n  return _regeneratorRuntime.async(function getCity$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(apiClient.get(\"weather?q=\" + city + \"&appid=\" + settings.apiKey));\n\n        case 3:\n          response = _context.sent;\n          console.log(response);\n          return _context.abrupt(\"return\", response.data);\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          return _context.abrupt(\"return\");\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n};\n\nvar getCoords = function getCoords(lat, lon) {\n  return apiClient.get(\"weather?lat=\" + lat + \"&lon=\" + lon + \"&appid=\" + settings.apiKey);\n};\n\nvar getPredictionCoords = function getPredictionCoords(lat, lon) {\n  return apiClient.get(\"onecall?lat=\" + lat + \"&lon=\" + lon + \"&appid=\" + settings.apiKey);\n};\n\nexport default {\n  getCity: getCity,\n  getCoords: getCoords,\n  getPredictionCoords: getPredictionCoords\n};","map":{"version":3,"sources":["D:/Node.Js/React Native/weather/app/api/weather.js"],"names":["settings","apiClient","getCity","city","get","apiKey","response","console","log","data","getCoords","lat","lon","getPredictionCoords"],"mappings":";AAAA,OAAOA,QAAP;AACA,OAAOC,SAAP;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEWF,SAAS,CAACG,GAAV,gBACRD,IADQ,eACMH,QAAQ,CAACK,MADf,CAFX;;AAAA;AAENC,UAAAA,QAFM;AAKZC,UAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AALY,2CAMLA,QAAQ,CAACG,IANJ;;AAAA;AAAA;AAAA;AAQZF,UAAAA,OAAO,CAACC,GAAR;AARY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB;;AAaA,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD,EAAMC,GAAN;AAAA,SAChBX,SAAS,CAACG,GAAV,kBAA6BO,GAA7B,aAAwCC,GAAxC,eAAqDZ,QAAQ,CAACK,MAA9D,CADgB;AAAA,CAAlB;;AAGA,IAAMQ,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACF,GAAD,EAAMC,GAAN;AAAA,SAC1BX,SAAS,CAACG,GAAV,kBAA6BO,GAA7B,aAAwCC,GAAxC,eAAqDZ,QAAQ,CAACK,MAA9D,CAD0B;AAAA,CAA5B;;AAGA,eAAe;AAAEH,EAAAA,OAAO,EAAPA,OAAF;AAAWQ,EAAAA,SAAS,EAATA,SAAX;AAAsBG,EAAAA,mBAAmB,EAAnBA;AAAtB,CAAf","sourcesContent":["import settings from \"../config/settings\";\r\nimport apiClient from \"./client\";\r\n\r\nconst getCity = async (city) => {\r\n  try {\r\n    const response = await apiClient.get(\r\n      `weather?q=${city}&appid=${settings.apiKey}`\r\n    );\r\n    console.log(response);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.log(err);\r\n    return;\r\n  }\r\n};\r\n\r\nconst getCoords = (lat, lon) =>\r\n  apiClient.get(`weather?lat=${lat}&lon=${lon}&appid=${settings.apiKey}`);\r\n\r\nconst getPredictionCoords = (lat, lon) =>\r\n  apiClient.get(`onecall?lat=${lat}&lon=${lon}&appid=${settings.apiKey}`);\r\n\r\nexport default { getCity, getCoords, getPredictionCoords };\r\n"]},"metadata":{},"sourceType":"module"}