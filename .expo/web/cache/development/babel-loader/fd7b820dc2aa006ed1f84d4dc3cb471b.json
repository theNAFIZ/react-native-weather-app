{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SET_CITY, SET_COORDS, SET_ACTIVE, DATA_CITY, DATA_COORD, ERROR } from \"./actions\";\nexport default function (state, action) {\n  var type = action.type,\n      payload = action.payload;\n\n  switch (type) {\n    case SET_ACTIVE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        active: payload,\n        loading: true\n      });\n\n    case SET_CITY:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        city: payload,\n        loading: false\n      });\n\n    case SET_COORDS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        coords: {\n          lat: payload.lat,\n          lon: payload.lon\n        },\n        loading: false\n      });\n\n    case DATA_CITY:\n    case DATA_COORD:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        weatherData: _objectSpread(_objectSpread({}, state.weatherData), {}, _defineProperty({}, payload.loc.city, {\n          data: payload.data,\n          loc: payload.loc\n        })),\n        loading: false\n      });\n\n    case ERROR:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: false,\n          error: true,\n          errors: payload\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["D:/Node.Js/React Native/weather/app/context/reducers.js"],"names":["SET_CITY","SET_COORDS","SET_ACTIVE","DATA_CITY","DATA_COORD","ERROR","state","action","type","payload","active","loading","city","coords","lat","lon","weatherData","loc","data","error","errors"],"mappings":";;;;;;AAAA,SACEA,QADF,EAEEC,UAFF,EAGEC,UAHF,EAIEC,SAJF,EAKEC,UALF,EAMEC,KANF;AASA,eAAe,UAAUC,KAAV,EAAiBC,MAAjB,EAAyB;AAAA,MAC9BC,IAD8B,GACZD,MADY,CAC9BC,IAD8B;AAAA,MACxBC,OADwB,GACZF,MADY,CACxBE,OADwB;;AAEtC,UAAQD,IAAR;AACE,SAAKN,UAAL;AACE,6CACKI,KADL;AAEEI,QAAAA,MAAM,EAAED,OAFV;AAGEE,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKX,QAAL;AACE,6CACKM,KADL;AAEEM,QAAAA,IAAI,EAAEH,OAFR;AAGEE,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKV,UAAL;AACE,6CACKK,KADL;AAEEO,QAAAA,MAAM,EAAE;AAAEC,UAAAA,GAAG,EAAEL,OAAO,CAACK,GAAf;AAAoBC,UAAAA,GAAG,EAAEN,OAAO,CAACM;AAAjC,SAFV;AAGEJ,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKR,SAAL;AACA,SAAKC,UAAL;AACE,6CACKE,KADL;AAEEU,QAAAA,WAAW,kCACNV,KAAK,CAACU,WADA,2BAERP,OAAO,CAACQ,GAAR,CAAYL,IAFJ,EAEW;AAAEM,UAAAA,IAAI,EAAET,OAAO,CAACS,IAAhB;AAAsBD,UAAAA,GAAG,EAAER,OAAO,CAACQ;AAAnC,SAFX,EAFb;AAMEN,QAAAA,OAAO,EAAE;AANX;;AASF,SAAKN,KAAL;AAAY;AACV,+CACKC,KADL;AAEEK,UAAAA,OAAO,EAAE,KAFX;AAGEQ,UAAAA,KAAK,EAAE,IAHT;AAIEC,UAAAA,MAAM,EAAEX;AAJV;AAMD;;AACD;AACE,aAAOH,KAAP;AAvCJ;AAyCD","sourcesContent":["import {\r\n  SET_CITY,\r\n  SET_COORDS,\r\n  SET_ACTIVE,\r\n  DATA_CITY,\r\n  DATA_COORD,\r\n  ERROR,\r\n} from \"./actions\";\r\n\r\nexport default function (state, action) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case SET_ACTIVE:\r\n      return {\r\n        ...state,\r\n        active: payload,\r\n        loading: true,\r\n      };\r\n    case SET_CITY:\r\n      return {\r\n        ...state,\r\n        city: payload,\r\n        loading: false,\r\n      };\r\n    case SET_COORDS:\r\n      return {\r\n        ...state,\r\n        coords: { lat: payload.lat, lon: payload.lon },\r\n        loading: false,\r\n      };\r\n    case DATA_CITY:\r\n    case DATA_COORD:\r\n      return {\r\n        ...state,\r\n        weatherData: {\r\n          ...state.weatherData,\r\n          [payload.loc.city]: { data: payload.data, loc: payload.loc },\r\n        },\r\n        loading: false,\r\n      };\r\n\r\n    case ERROR: {\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: true,\r\n        errors: payload,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}