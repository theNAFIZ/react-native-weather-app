{"ast":null,"code":"var _jsxFileName = \"D:\\\\Node.Js\\\\React Native\\\\weather\\\\app\\\\components\\\\Report.js\";\nimport React, { useContext, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport colors from \"../config/colors\";\nimport { Context } from \"../context/Context\";\nimport Wind from \"./Wind\";\n\nfunction Report() {\n  var _useContext = useContext(Context),\n      loading = _useContext.loading,\n      error = _useContext.error,\n      cityData = _useContext.cityData;\n\n  return React.createElement(React.Fragment, null, loading ? React.createElement(ActivityIndicator, {\n    animating: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }) : React.createElement(React.Fragment, null, error && React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 21\n    }\n  }, \"No such location!\"), cityData && React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.location,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 15\n    }\n  }, cityData.name, \", \", cityData.sys.country), React.createElement(Image, {\n    style: styles.image,\n    source: {\n      uri: \"http://openweathermap.org/img/wn/\" + cityData.weather[0].icon + \".png\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 15\n    }\n  }), React.createElement(Text, {\n    style: styles.h3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 15\n    }\n  }, cityData.weather[0].description), React.createElement(Text, {\n    style: styles.h1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 15\n    }\n  }, Math.round(cityData.main.temp - 273), \"\\xB0C\"), React.createElement(View, {\n    style: styles.times,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 15\n    }\n  }, React.createElement(Text, {\n    style: styles.h3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }\n  }, \"Sunrise \", \" \\n\", new Date(cityData.sys.sunrise * 1000).getHours(), \":\", new Date(cityData.sys.sunrise * 1000).getMinutes()), React.createElement(View, {\n    style: styles.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }), React.createElement(Text, {\n    style: styles.h3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }, \"Sunset\", \" \\n\", new Date(cityData.sys.sunset * 1000).getHours(), \":\", new Date(cityData.sys.sunset * 1000).getMinutes())), React.createElement(Wind, {\n    deg: cityData.wind.deg,\n    speed: cityData.wind.speed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 15\n    }\n  }))));\n}\n\nexport default Report;\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: \"center\",\n    textAlign: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: colors.dark,\n    height: \"100%\",\n    width: \"100%\"\n  },\n  h1: {\n    fontSize: 60,\n    color: colors.text\n  },\n  h3: {\n    fontSize: 40,\n    color: colors.text\n  },\n  location: {\n    fontSize: 40,\n    color: colors.text,\n    fontWeight: \"600\"\n  },\n  image: {\n    height: 90,\n    width: 90\n  },\n  times: {\n    flexDirection: \"row\",\n    alignItems: \"center\"\n  },\n  divider: {\n    borderWidth: 1,\n    borderColor: \"#000\",\n    margin: 20,\n    height: 100\n  }\n});","map":{"version":3,"sources":["D:/Node.Js/React Native/weather/app/components/Report.js"],"names":["React","useContext","useEffect","colors","Context","Wind","Report","loading","error","cityData","styles","container","location","name","sys","country","image","uri","weather","icon","h3","description","h1","Math","round","main","temp","times","Date","sunrise","getHours","getMinutes","divider","sunset","wind","deg","speed","StyleSheet","create","alignItems","textAlign","justifyContent","backgroundColor","dark","height","width","fontSize","color","text","fontWeight","flexDirection","borderWidth","borderColor","margin"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;;;;;;AAEA,OAAOC,MAAP;AACA,SAASC,OAAT;AACA,OAAOC,IAAP;;AAEA,SAASC,MAAT,GAAkB;AAAA,oBACqBL,UAAU,CAACG,OAAD,CAD/B;AAAA,MACRG,OADQ,eACRA,OADQ;AAAA,MACCC,KADD,eACCA,KADD;AAAA,MACQC,QADR,eACQA,QADR;;AAGhB,SACE,0CACGF,OAAO,GACN,oBAAC,iBAAD;AAAmB,IAAA,SAAS,EAAEA,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADM,GAGN,0CACGC,KAAK,IAAI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADZ,EAGGC,QAAQ,IACP,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAED,MAAM,CAACE,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,QAAQ,CAACI,IADZ,QACoBJ,QAAQ,CAACK,GAAT,CAAaC,OADjC,CADF,EAIE,oBAAC,KAAD;AACE,IAAA,KAAK,EAAEL,MAAM,CAACM,KADhB;AAEE,IAAA,MAAM,EAAE;AACNC,MAAAA,GAAG,wCAAsCR,QAAQ,CAACS,OAAT,CAAiB,CAAjB,EAAoBC,IAA1D;AADG,KAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAUE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAET,MAAM,CAACU,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyBX,QAAQ,CAACS,OAAT,CAAiB,CAAjB,EAAoBG,WAA7C,CAVF,EAWE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEX,MAAM,CAACY,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,CAACC,KAAL,CAAWf,QAAQ,CAACgB,IAAT,CAAcC,IAAd,GAAqB,GAAhC,CADH,UAXF,EAcE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEhB,MAAM,CAACiB,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEjB,MAAM,CAACU,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACW,KADX,EAEG,IAAIQ,IAAJ,CAASnB,QAAQ,CAACK,GAAT,CAAae,OAAb,GAAuB,IAAhC,EAAsCC,QAAtC,EAFH,OAGG,IAAIF,IAAJ,CAASnB,QAAQ,CAACK,GAAT,CAAae,OAAb,GAAuB,IAAhC,EAAsCE,UAAtC,EAHH,CADF,EAME,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAErB,MAAM,CAACsB,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAOE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEtB,MAAM,CAACU,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACS,KADT,EAEG,IAAIQ,IAAJ,CAASnB,QAAQ,CAACK,GAAT,CAAamB,MAAb,GAAsB,IAA/B,EAAqCH,QAArC,EAFH,OAGG,IAAIF,IAAJ,CAASnB,QAAQ,CAACK,GAAT,CAAamB,MAAb,GAAsB,IAA/B,EAAqCF,UAArC,EAHH,CAPF,CAdF,EA2BE,oBAAC,IAAD;AAAM,IAAA,GAAG,EAAEtB,QAAQ,CAACyB,IAAT,CAAcC,GAAzB;AAA8B,IAAA,KAAK,EAAE1B,QAAQ,CAACyB,IAAT,CAAcE,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA3BF,CAJJ,CAJJ,CADF;AA2CD;;AAED,eAAe9B,MAAf;AAEA,IAAMI,MAAM,GAAG2B,UAAU,CAACC,MAAX,CAAkB;AAC/B3B,EAAAA,SAAS,EAAE;AACT4B,IAAAA,UAAU,EAAE,QADH;AAETC,IAAAA,SAAS,EAAE,QAFF;AAGTC,IAAAA,cAAc,EAAE,QAHP;AAITC,IAAAA,eAAe,EAAEvC,MAAM,CAACwC,IAJf;AAKTC,IAAAA,MAAM,EAAE,MALC;AAMTC,IAAAA,KAAK,EAAE;AANE,GADoB;AAU/BvB,EAAAA,EAAE,EAAE;AACFwB,IAAAA,QAAQ,EAAE,EADR;AAEFC,IAAAA,KAAK,EAAE5C,MAAM,CAAC6C;AAFZ,GAV2B;AAc/B5B,EAAAA,EAAE,EAAE;AACF0B,IAAAA,QAAQ,EAAE,EADR;AAEFC,IAAAA,KAAK,EAAE5C,MAAM,CAAC6C;AAFZ,GAd2B;AAkB/BpC,EAAAA,QAAQ,EAAE;AACRkC,IAAAA,QAAQ,EAAE,EADF;AAERC,IAAAA,KAAK,EAAE5C,MAAM,CAAC6C,IAFN;AAGRC,IAAAA,UAAU,EAAE;AAHJ,GAlBqB;AAuB/BjC,EAAAA,KAAK,EAAE;AACL4B,IAAAA,MAAM,EAAE,EADH;AAELC,IAAAA,KAAK,EAAE;AAFF,GAvBwB;AA2B/BlB,EAAAA,KAAK,EAAE;AACLuB,IAAAA,aAAa,EAAE,KADV;AAELX,IAAAA,UAAU,EAAE;AAFP,GA3BwB;AA+B/BP,EAAAA,OAAO,EAAE;AACPmB,IAAAA,WAAW,EAAE,CADN;AAEPC,IAAAA,WAAW,EAAE,MAFN;AAGPC,IAAAA,MAAM,EAAE,EAHD;AAIPT,IAAAA,MAAM,EAAE;AAJD;AA/BsB,CAAlB,CAAf","sourcesContent":["import React, { useContext, useEffect } from \"react\";\r\nimport { StyleSheet, View, Text, Image, ActivityIndicator } from \"react-native\";\r\nimport colors from \"../config/colors\";\r\nimport { Context } from \"../context/Context\";\r\nimport Wind from \"./Wind\";\r\n\r\nfunction Report() {\r\n  const { loading, error, cityData } = useContext(Context);\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <ActivityIndicator animating={loading} />\r\n      ) : (\r\n        <>\r\n          {error && <Text>No such location!</Text>}\r\n\r\n          {cityData && (\r\n            <View style={styles.container}>\r\n              <Text style={styles.location}>\r\n                {cityData.name}, {cityData.sys.country}\r\n              </Text>\r\n              <Image\r\n                style={styles.image}\r\n                source={{\r\n                  uri: `http://openweathermap.org/img/wn/${cityData.weather[0].icon}.png`,\r\n                }}\r\n              />\r\n              <Text style={styles.h3}>{cityData.weather[0].description}</Text>\r\n              <Text style={styles.h1}>\r\n                {Math.round(cityData.main.temp - 273)}Â°C\r\n              </Text>\r\n              <View style={styles.times}>\r\n                <Text style={styles.h3}>\r\n                  Sunrise {\" \\n\"}\r\n                  {new Date(cityData.sys.sunrise * 1000).getHours()}:\r\n                  {new Date(cityData.sys.sunrise * 1000).getMinutes()}\r\n                </Text>\r\n                <View style={styles.divider} />\r\n                <Text style={styles.h3}>\r\n                  Sunset{\" \\n\"}\r\n                  {new Date(cityData.sys.sunset * 1000).getHours()}:\r\n                  {new Date(cityData.sys.sunset * 1000).getMinutes()}\r\n                </Text>\r\n              </View>\r\n              <Wind deg={cityData.wind.deg} speed={cityData.wind.speed} />\r\n            </View>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Report;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    alignItems: \"center\",\r\n    textAlign: \"center\",\r\n    justifyContent: \"center\",\r\n    backgroundColor: colors.dark,\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n  },\r\n\r\n  h1: {\r\n    fontSize: 60,\r\n    color: colors.text,\r\n  },\r\n  h3: {\r\n    fontSize: 40,\r\n    color: colors.text,\r\n  },\r\n  location: {\r\n    fontSize: 40,\r\n    color: colors.text,\r\n    fontWeight: \"600\",\r\n  },\r\n  image: {\r\n    height: 90,\r\n    width: 90,\r\n  },\r\n  times: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n  },\r\n  divider: {\r\n    borderWidth: 1,\r\n    borderColor: \"#000\",\r\n    margin: 20,\r\n    height: 100,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}