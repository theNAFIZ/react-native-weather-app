{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Node.Js\\\\React Native\\\\weather\\\\app\\\\screens\\\\HomeScreen.js\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport Report from \"../components/Report\";\nimport { Context } from \"../context/Context\";\nimport PredictionScreen from \"./PredictionScreen\";\nimport SelectHome from \"../components/SelectHome\";\nvar width = Dimensions.get(\"window\").width;\nexport default function HomeScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      refreshing = _useState2[0],\n      setRefreshing = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      ready = _useState4[0],\n      setReady = _useState4[1];\n\n  var _useContext = useContext(Context),\n      coords = _useContext.coords,\n      dataFromCity = _useContext.dataFromCity,\n      dataFromCoords = _useContext.dataFromCoords,\n      listLocations = _useContext.listLocations,\n      setCoords = _useContext.setCoords,\n      setHome = _useContext.setHome,\n      home = _useContext.home;\n\n  useEffect(function () {\n    setReady(false);\n    effect();\n    setReady(true);\n  }, [home]);\n\n  var effect = function effect() {\n    var homecity;\n    return _regeneratorRuntime.async(function effect$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"homecity\"));\n\n          case 2:\n            homecity = _context.sent;\n\n            if (homecity) {\n              setHome(homecity);\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    setReady(false);\n    navigator.geolocation.getCurrentPosition(function (_ref2) {\n      var coords = _ref2.coords;\n      setCoords({\n        lat: coords.latitude,\n        lon: coords.longitude\n      });\n    }, function (err) {\n      console.log(err);\n      console.log(\"Can't get location. switching to home location.\");\n    });\n    setReady(true);\n  }, []);\n  useEffect(function () {\n    eff();\n  }, [coords, home]);\n\n  var eff = function eff() {\n    return _regeneratorRuntime.async(function eff$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setRefreshing(true);\n\n            if (!(coords.lat && coords.lon)) {\n              _context2.next = 6;\n              break;\n            }\n\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(dataFromCoords(coords));\n\n          case 4:\n            _context2.next = 9;\n            break;\n\n          case 6:\n            if (!home) {\n              _context2.next = 9;\n              break;\n            }\n\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(dataFromCity(home));\n\n          case 9:\n            listLocations();\n            setRefreshing(false);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(React.Fragment, null, home ? React.createElement(ScrollView, {\n    horizontal: true,\n    decelerationRate: \"normal\",\n    snapToInterval: width,\n    refreshControl: React.createElement(RefreshControl, {\n      refreshing: refreshing,\n      onRefresh: eff,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, React.createElement(Report, {\n    navigation: navigation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }), React.createElement(PredictionScreen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  })) : React.createElement(SelectHome, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["D:/Node.Js/React Native/weather/app/screens/HomeScreen.js"],"names":["React","useState","useEffect","useContext","AsyncStorage","Report","Context","PredictionScreen","SelectHome","width","Dimensions","get","HomeScreen","navigation","refreshing","setRefreshing","ready","setReady","coords","dataFromCity","dataFromCoords","listLocations","setCoords","setHome","home","effect","getItem","homecity","navigator","geolocation","getCurrentPosition","lat","latitude","lon","longitude","err","console","log","eff"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Dimensions, ScrollView, RefreshControl } from \"react-native\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n\r\nimport Report from \"../components/Report\";\r\nimport { Context } from \"../context/Context\";\r\nimport PredictionScreen from \"./PredictionScreen\";\r\nimport SelectHome from \"../components/SelectHome\";\r\n\r\nconst width = Dimensions.get(\"window\").width;\r\n\r\nexport default function HomeScreen({ navigation }) {\r\n  const [refreshing, setRefreshing] = useState(false);\r\n  const [ready, setReady] = useState(false);\r\n  const {\r\n    coords,\r\n    dataFromCity,\r\n    dataFromCoords,\r\n    listLocations,\r\n    setCoords,\r\n    setHome,\r\n    home,\r\n  } = useContext(Context);\r\n\r\n  // Homecity\r\n  useEffect(() => {\r\n    setReady(false);\r\n    effect();\r\n    setReady(true);\r\n  }, [home]);\r\n\r\n  const effect = async () => {\r\n    let homecity = await AsyncStorage.getItem(\"homecity\");\r\n    if (homecity) {\r\n      setHome(homecity);\r\n    }\r\n  };\r\n\r\n  // get location from phone\r\n  useEffect(() => {\r\n    setReady(false);\r\n    navigator.geolocation.getCurrentPosition(\r\n      ({ coords }) => {\r\n        setCoords({ lat: coords.latitude, lon: coords.longitude });\r\n      },\r\n      (err) => {\r\n        console.log(err);\r\n        console.log(\"Can't get location. switching to home location.\");\r\n      }\r\n    );\r\n    setReady(true);\r\n  }, []);\r\n\r\n  // get data for specific location\r\n  useEffect(() => {\r\n    eff();\r\n  }, [coords, home]);\r\n\r\n  const eff = async () => {\r\n    setRefreshing(true);\r\n    if (coords.lat && coords.lon) await dataFromCoords(coords);\r\n    else if (home) await dataFromCity(home);\r\n    listLocations();\r\n    setRefreshing(false);\r\n  };\r\n  return (\r\n    <>\r\n      {home ? (\r\n        <ScrollView\r\n          horizontal\r\n          decelerationRate=\"normal\"\r\n          snapToInterval={width}\r\n          refreshControl={\r\n            <RefreshControl refreshing={refreshing} onRefresh={eff} />\r\n          }\r\n        >\r\n          <Report navigation={navigation} />\r\n          <PredictionScreen />\r\n        </ScrollView>\r\n      ) : (\r\n        <SelectHome />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}