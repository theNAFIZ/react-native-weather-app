{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Node.Js\\\\React Native\\\\weather\\\\app\\\\screens\\\\HomeScreen.js\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport Report from \"../components/Report\";\nimport { Context } from \"../context/Context\";\nimport PredictionScreen from \"./PredictionScreen\";\nimport SelectHome from \"../components/SelectHome\";\nimport colors from \"../config/colors\";\nvar width = Dimensions.get(\"window\").width;\nexport default function HomeScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      refreshing = _useState2[0],\n      setRefreshing = _useState2[1];\n\n  var _useContext = useContext(Context),\n      coords = _useContext.coords,\n      dataFromCity = _useContext.dataFromCity,\n      dataFromCoords = _useContext.dataFromCoords,\n      listLocations = _useContext.listLocations,\n      setCoords = _useContext.setCoords,\n      setHome = _useContext.setHome,\n      home = _useContext.home;\n\n  useEffect(function () {\n    effect();\n  }, [home]);\n\n  var effect = function effect() {\n    var homecity;\n    return _regeneratorRuntime.async(function effect$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"homecity\"));\n\n          case 2:\n            homecity = _context.sent;\n\n            if (homecity) {\n              setHome(homecity);\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    navigator.geolocation.getCurrentPosition(function (_ref2) {\n      var coords = _ref2.coords;\n      setCoords({\n        lat: coords.latitude,\n        lon: coords.longitude\n      });\n    }, function (err) {\n      console.log(err);\n      console.log(\"Can't get location. switching to home location.\");\n    });\n  }, []);\n  useEffect(function () {\n    eff();\n  }, [coords, home]);\n\n  var eff = function eff() {\n    return _regeneratorRuntime.async(function eff$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setRefreshing(true);\n\n            if (!(coords.lat && coords.lon)) {\n              _context2.next = 6;\n              break;\n            }\n\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(dataFromCoords(coords));\n\n          case 4:\n            _context2.next = 9;\n            break;\n\n          case 6:\n            if (!home) {\n              _context2.next = 9;\n              break;\n            }\n\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(dataFromCity(home));\n\n          case 9:\n            listLocations();\n            setRefreshing(false);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(React.Fragment, null, home ? React.createElement(React.Fragment, null, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      console.log(\"pressed home\");\n      navigation.navigate(\"Menu\");\n    },\n    style: styles.menu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, React.createElement(MaterialCommunityIcons, {\n    style: styles.icon,\n    name: \"format-line-style\",\n    size: 25,\n    color: colors.dark,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  })), React.createElement(ScrollView, {\n    horizontal: true,\n    decelerationRate: \"normal\",\n    snapToInterval: width,\n    refreshControl: React.createElement(RefreshControl, {\n      refreshing: refreshing,\n      onRefresh: eff,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, React.createElement(Report, {\n    navigation: navigation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }), React.createElement(PredictionScreen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }))) : React.createElement(SelectHome, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  menu: {\n    position: \"absolute\",\n    backgroundColor: \"rgba(100, 100, 100, 1)\",\n    borderRadius: 22,\n    height: 44,\n    width: 44,\n    margin: 10,\n    top: 0,\n    left: 0,\n    zIndex: 100000\n  },\n  icon: {\n    textAlign: \"center\",\n    textAlignVertical: \"center\"\n  }\n});","map":{"version":3,"sources":["D:/Node.Js/React Native/weather/app/screens/HomeScreen.js"],"names":["React","useState","useEffect","useContext","MaterialCommunityIcons","AsyncStorage","Report","Context","PredictionScreen","SelectHome","colors","width","Dimensions","get","HomeScreen","navigation","refreshing","setRefreshing","coords","dataFromCity","dataFromCoords","listLocations","setCoords","setHome","home","effect","getItem","homecity","navigator","geolocation","getCurrentPosition","lat","latitude","lon","longitude","err","console","log","eff","navigate","styles","menu","icon","dark","StyleSheet","create","position","backgroundColor","borderRadius","height","margin","top","left","zIndex","textAlign","textAlignVertical"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Dimensions,\r\n  ScrollView,\r\n  RefreshControl,\r\n  StyleSheet,\r\n  TouchableOpacity,\r\n} from \"react-native\";\r\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n\r\nimport Report from \"../components/Report\";\r\nimport { Context } from \"../context/Context\";\r\nimport PredictionScreen from \"./PredictionScreen\";\r\nimport SelectHome from \"../components/SelectHome\";\r\nimport colors from \"../config/colors\";\r\n\r\nconst width = Dimensions.get(\"window\").width;\r\n\r\nexport default function HomeScreen({ navigation }) {\r\n  const [refreshing, setRefreshing] = useState(false);\r\n  const {\r\n    coords,\r\n    dataFromCity,\r\n    dataFromCoords,\r\n    listLocations,\r\n    setCoords,\r\n    setHome,\r\n    home,\r\n  } = useContext(Context);\r\n\r\n  // Homecity\r\n  useEffect(() => {\r\n    effect();\r\n  }, [home]);\r\n\r\n  const effect = async () => {\r\n    let homecity = await AsyncStorage.getItem(\"homecity\");\r\n    if (homecity) {\r\n      setHome(homecity);\r\n    }\r\n  };\r\n\r\n  // get location from phone\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      ({ coords }) => {\r\n        setCoords({ lat: coords.latitude, lon: coords.longitude });\r\n      },\r\n      (err) => {\r\n        console.log(err);\r\n        console.log(\"Can't get location. switching to home location.\");\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  // get data for specific location\r\n  useEffect(() => {\r\n    eff();\r\n  }, [coords, home]);\r\n\r\n  const eff = async () => {\r\n    setRefreshing(true);\r\n    if (coords.lat && coords.lon) await dataFromCoords(coords);\r\n    else if (home) await dataFromCity(home);\r\n    listLocations();\r\n    setRefreshing(false);\r\n  };\r\n  return (\r\n    <>\r\n      {home ? (\r\n        <>\r\n          <TouchableOpacity\r\n            onPress={() => {\r\n              console.log(\"pressed home\");\r\n              navigation.navigate(\"Menu\");\r\n            }}\r\n            style={styles.menu}\r\n          >\r\n            <MaterialCommunityIcons\r\n              style={styles.icon}\r\n              name=\"format-line-style\"\r\n              size={25}\r\n              color={colors.dark}\r\n            />\r\n          </TouchableOpacity>\r\n          <ScrollView\r\n            horizontal\r\n            decelerationRate=\"normal\"\r\n            snapToInterval={width}\r\n            refreshControl={\r\n              <RefreshControl refreshing={refreshing} onRefresh={eff} />\r\n            }\r\n          >\r\n            <Report navigation={navigation} />\r\n            <PredictionScreen />\r\n          </ScrollView>\r\n        </>\r\n      ) : (\r\n        <SelectHome />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  menu: {\r\n    position: \"absolute\",\r\n    backgroundColor: \"rgba(100, 100, 100, 1)\",\r\n    borderRadius: 22,\r\n    height: 44,\r\n    width: 44,\r\n    margin: 10,\r\n    top: 0,\r\n    left: 0,\r\n    zIndex: 100000,\r\n  },\r\n  icon: {\r\n    textAlign: \"center\",\r\n    textAlignVertical: \"center\",\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}