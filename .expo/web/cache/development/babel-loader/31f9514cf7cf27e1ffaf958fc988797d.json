{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\Node.Js\\\\React Native\\\\weather\\\\app\\\\screens\\\\PredictionScreen.js\";\n\nimport React, { useContext } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Context } from \"../context/Context\";\nimport Item from \"../components/Item\";\n\nvar PredictionScreen = function PredictionScreen() {\n  var _useContext = useContext(Context),\n      weatherData = _useContext.weatherData,\n      active = _useContext.active;\n\n  var data = weatherData[active] ? weatherData[active].data : undefined;\n  return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, data ? React.createElement(FlatList, {\n    horizontal: true,\n    data: data.daily,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(Item, {\n        icon: item.weather[0].icon,\n        temp: {\n          min: item.temp.min,\n          max: item.temp.max\n        },\n        type: \"daily\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }\n      });\n    },\n    keyExtractor: function keyExtractor(item, index) {\n      return item + index;\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }) : React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, \"No data found\"));\n};\n\nexport default PredictionScreen;","map":{"version":3,"sources":["D:/Node.Js/React Native/weather/app/screens/PredictionScreen.js"],"names":["React","useContext","Context","Item","PredictionScreen","weatherData","active","data","undefined","daily","item","weather","icon","min","temp","max","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;;;;;;AAQA,SAASC,OAAT;AACA,OAAOC,IAAP;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAAA,oBACGH,UAAU,CAACC,OAAD,CADb;AAAA,MACrBG,WADqB,eACrBA,WADqB;AAAA,MACRC,MADQ,eACRA,MADQ;;AAE7B,MAAMC,IAAI,GAAGF,WAAW,CAACC,MAAD,CAAX,GAAsBD,WAAW,CAACC,MAAD,CAAX,CAAoBC,IAA1C,GAAiDC,SAA9D;AACA,SAKE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,IAAI,GACH,oBAAC,QAAD;AACE,IAAA,UAAU,MADZ;AAEE,IAAA,IAAI,EAAEA,IAAI,CAACE,KAFb;AAGE,IAAA,UAAU,EAAE;AAAA,UAAGC,IAAH,QAAGA,IAAH;AAAA,aACV,oBAAC,IAAD;AACE,QAAA,IAAI,EAAEA,IAAI,CAACC,OAAL,CAAa,CAAb,EAAgBC,IADxB;AAEE,QAAA,IAAI,EAAE;AAAEC,UAAAA,GAAG,EAAEH,IAAI,CAACI,IAAL,CAAUD,GAAjB;AAAsBE,UAAAA,GAAG,EAAEL,IAAI,CAACI,IAAL,CAAUC;AAArC,SAFR;AAGE,QAAA,IAAI,EAAC,OAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADU;AAAA,KAHd;AAUE,IAAA,YAAY,EAAE,sBAACL,IAAD,EAAOM,KAAP;AAAA,aAAiBN,IAAI,GAAGM,KAAxB;AAAA,KAVhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADG,GAcH,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAfJ,CALF;AAyBD,CA5BD;;AA6BA,eAAeZ,gBAAf","sourcesContent":["import React, { useContext } from \"react\";\r\nimport {\r\n  ScrollView,\r\n  ImageBackground,\r\n  FlatList,\r\n  View,\r\n  Text,\r\n} from \"react-native\";\r\nimport { Context } from \"../context/Context\";\r\nimport Item from \"../components/Item\";\r\n\r\nconst PredictionScreen = () => {\r\n  const { weatherData, active } = useContext(Context);\r\n  const data = weatherData[active] ? weatherData[active].data : undefined;\r\n  return (\r\n    // <ImageBackground\r\n    //   source={{ uri: \"http://picsum.photos/720/540?blur=1\" }}\r\n    //   style={{ height: \"100%\", width: \"100%\", opacity: 0.7 }}\r\n    // >\r\n    <View>\r\n      {data ? (\r\n        <FlatList\r\n          horizontal\r\n          data={data.daily}\r\n          renderItem={({ item }) => (\r\n            <Item\r\n              icon={item.weather[0].icon}\r\n              temp={{ min: item.temp.min, max: item.temp.max }}\r\n              type=\"daily\"\r\n            />\r\n          )}\r\n          keyExtractor={(item, index) => item + index}\r\n        />\r\n      ) : (\r\n        <Text>No data found</Text>\r\n      )}\r\n    </View>\r\n    // </ImageBackground>\r\n  );\r\n};\r\nexport default PredictionScreen;\r\n"]},"metadata":{},"sourceType":"module"}