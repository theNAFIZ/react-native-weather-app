{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport weatherApi from \"../api/weather\";\nexport var SET_CITY = \"SET_CITY\";\nexport var SET_COORDS = \"GET_COORDS\";\nexport var DATA_CITY = \"DATA_CITY\";\nexport var DATA_COORD = \"DATA_COORD\";\nexport var ERROR = \"ERROR\";\nexport var createActions = function createActions(dispatch) {\n  return {\n    setCity: function setCity(formData) {\n      dispatch({\n        type: SET_CITY,\n        payload: formData\n      });\n    },\n    setCoords: function setCoords() {\n      try {\n        dispatch({\n          type: SET_COORDS,\n          payload: {\n            lat: 0,\n            lon: 0\n          }\n        });\n      } catch (error) {\n        console.log(error);\n        dispatch({\n          type: ERROR,\n          payload: \"Couldn't get current location of your device\"\n        });\n      }\n    },\n    dataFromCity: function dataFromCity(city) {\n      var wData;\n      return _regeneratorRuntime.async(function dataFromCity$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(weatherApi.getCity(city));\n\n            case 3:\n              wData = _context.sent;\n\n              if (wData.cod !== 200) {\n                dispatch({\n                  type: ERROR,\n                  payload: \"Corrupted Response\"\n                });\n              } else {\n                dispatch({\n                  type: DATA_CITY,\n                  payload: wData\n                });\n              }\n\n              _context.next = 11;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n              dispatch({\n                type: ERROR,\n                payload: \"Error\"\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    },\n    dataFromCoords: function dataFromCoords(lat, lon) {\n      var wData;\n      return _regeneratorRuntime.async(function dataFromCoords$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(weatherApi.getPredictionCoords(lat, lon));\n\n            case 3:\n              wData = _context2.sent;\n\n              if (wData.cod !== 200) {\n                dispatch({\n                  type: ERROR,\n                  payload: \"Corrupted Response\"\n                });\n              } else {\n                dispatch({\n                  type: DATA_COORD,\n                  payload: wData.data\n                });\n              }\n\n              _context2.next = 11;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n              dispatch({\n                type: ERROR,\n                payload: \"Error\"\n              });\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    }\n  };\n};","map":{"version":3,"sources":["D:/Node.Js/React Native/weather/app/context/actions.js"],"names":["weatherApi","SET_CITY","SET_COORDS","DATA_CITY","DATA_COORD","ERROR","createActions","dispatch","setCity","formData","type","payload","setCoords","lat","lon","error","console","log","dataFromCity","city","getCity","wData","cod","dataFromCoords","getPredictionCoords","data"],"mappings":";AAAA,OAAOA,UAAP;AAEA,OAAO,IAAMC,QAAQ,GAAG,UAAjB;AACP,OAAO,IAAMC,UAAU,GAAG,YAAnB;AACP,OAAO,IAAMC,SAAS,GAAG,WAAlB;AACP,OAAO,IAAMC,UAAU,GAAG,YAAnB;AACP,OAAO,IAAMC,KAAK,GAAG,OAAd;AAEP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD;AAAA,SAAe;AAC1CC,IAAAA,OAAO,EAAE,iBAACC,QAAD,EAAc;AACrBF,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAET,QADC;AAEPU,QAAAA,OAAO,EAAEF;AAFF,OAAD,CAAR;AAID,KANyC;AAQ1CG,IAAAA,SAAS,EAAE,qBAAM;AACf,UAAI;AAGFL,QAAAA,QAAQ,CAAC;AACPG,UAAAA,IAAI,EAAER,UADC;AAEPS,UAAAA,OAAO,EAAE;AAAEE,YAAAA,GAAG,EAAE,CAAP;AAAUC,YAAAA,GAAG,EAAE;AAAf;AAFF,SAAD,CAAR;AAID,OAPD,CAOE,OAAOC,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAEAR,QAAAA,QAAQ,CAAC;AACPG,UAAAA,IAAI,EAAEL,KADC;AAEPM,UAAAA,OAAO,EAAE;AAFF,SAAD,CAAR;AAID;AACF,KAxByC;AA0B1CO,IAAAA,YAAY,EAAE,sBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEUnB,UAAU,CAACoB,OAAX,CAAmBD,IAAnB,CAFV;;AAAA;AAEJE,cAAAA,KAFI;;AAGV,kBAAIA,KAAK,CAACC,GAAN,KAAc,GAAlB,EAAuB;AACrBf,gBAAAA,QAAQ,CAAC;AACPG,kBAAAA,IAAI,EAAEL,KADC;AAEPM,kBAAAA,OAAO,EAAE;AAFF,iBAAD,CAAR;AAID,eALD,MAKO;AACLJ,gBAAAA,QAAQ,CAAC;AACPG,kBAAAA,IAAI,EAAEP,SADC;AAEPQ,kBAAAA,OAAO,EAAEU;AAFF,iBAAD,CAAR;AAID;;AAbS;AAAA;;AAAA;AAAA;AAAA;AAeVL,cAAAA,OAAO,CAACC,GAAR;AACAV,cAAAA,QAAQ,CAAC;AACPG,gBAAAA,IAAI,EAAEL,KADC;AAEPM,gBAAAA,OAAO,EAAE;AAFF,eAAD,CAAR;;AAhBU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA1B4B;AAiD1CY,IAAAA,cAAc,EAAE,wBAAOV,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEQd,UAAU,CAACwB,mBAAX,CAA+BX,GAA/B,EAAoCC,GAApC,CAFR;;AAAA;AAENO,cAAAA,KAFM;;AAGZ,kBAAIA,KAAK,CAACC,GAAN,KAAc,GAAlB,EAAuB;AACrBf,gBAAAA,QAAQ,CAAC;AACPG,kBAAAA,IAAI,EAAEL,KADC;AAEPM,kBAAAA,OAAO,EAAE;AAFF,iBAAD,CAAR;AAID,eALD,MAKO;AACLJ,gBAAAA,QAAQ,CAAC;AACPG,kBAAAA,IAAI,EAAEN,UADC;AAEPO,kBAAAA,OAAO,EAAEU,KAAK,CAACI;AAFR,iBAAD,CAAR;AAID;;AAbW;AAAA;;AAAA;AAAA;AAAA;AAeZT,cAAAA,OAAO,CAACC,GAAR;AACAV,cAAAA,QAAQ,CAAC;AACPG,gBAAAA,IAAI,EAAEL,KADC;AAEPM,gBAAAA,OAAO,EAAE;AAFF,eAAD,CAAR;;AAhBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjD0B,GAAf;AAAA,CAAtB","sourcesContent":["import weatherApi from \"../api/weather\";\r\n\r\nexport const SET_CITY = \"SET_CITY\";\r\nexport const SET_COORDS = \"GET_COORDS\";\r\nexport const DATA_CITY = \"DATA_CITY\";\r\nexport const DATA_COORD = \"DATA_COORD\";\r\nexport const ERROR = \"ERROR\";\r\n\r\nexport const createActions = (dispatch) => ({\r\n  setCity: (formData) => {\r\n    dispatch({\r\n      type: SET_CITY,\r\n      payload: formData,\r\n    });\r\n  },\r\n\r\n  setCoords: () => {\r\n    try {\r\n      //Get Coords from phone\r\n      //useLocation\r\n      dispatch({\r\n        type: SET_COORDS,\r\n        payload: { lat: 0, lon: 0 }, //coords lat, lon\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      //Error\r\n      dispatch({\r\n        type: ERROR,\r\n        payload: \"Couldn't get current location of your device\",\r\n      });\r\n    }\r\n  },\r\n\r\n  dataFromCity: async (city) => {\r\n    try {\r\n      const wData = await weatherApi.getCity(city);\r\n      if (wData.cod !== 200) {\r\n        dispatch({\r\n          type: ERROR,\r\n          payload: \"Corrupted Response\",\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: DATA_CITY,\r\n          payload: wData,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch({\r\n        type: ERROR,\r\n        payload: \"Error\",\r\n      });\r\n    }\r\n  },\r\n\r\n  dataFromCoords: async (lat, lon) => {\r\n    try {\r\n      const wData = await weatherApi.getPredictionCoords(lat, lon);\r\n      if (wData.cod !== 200) {\r\n        dispatch({\r\n          type: ERROR,\r\n          payload: \"Corrupted Response\",\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: DATA_COORD,\r\n          payload: wData.data,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch({\r\n        type: ERROR,\r\n        payload: \"Error\",\r\n      });\r\n    }\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}