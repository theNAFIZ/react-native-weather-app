{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport settings from \"../config/settings\";\nimport apiClient from \"./client\";\n\nvar getCity = function getCity() {\n  var city,\n      response,\n      _args = arguments;\n  return _regeneratorRuntime.async(function getCity$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          city = _args.length > 0 && _args[0] !== undefined ? _args[0] : \"pabna\";\n          _context.prev = 1;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(apiClient.get(\"weather?q=\" + city + \"&appid=\" + settings.apiKey));\n\n        case 4:\n          response = _context.sent;\n          console.log(response);\n          return _context.abrupt(\"return\", response.data);\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](1);\n          console.log(_context.t0);\n          return _context.abrupt(\"return\");\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 9]], Promise);\n};\n\nvar getCoords = function getCoords(coords) {\n  return apiClient.get(\"weather?q=\" + coords + \"&appid=\" + settings.apiKey);\n};\n\nvar getPredictionCity = function getPredictionCity() {\n  var city = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"pabna\";\n  return apiClient.get(\"weather?q=\" + city + \"&appid=\" + settings.apiKey);\n};\n\nvar getPredictionCoords = function getPredictionCoords(coords) {\n  return apiClient.get(\"weather?q=\" + coords + \"&appid=\" + settings.apiKey);\n};\n\nexport default {\n  getCity: getCity,\n  getCoords: getCoords,\n  getPredictionCity: getPredictionCity,\n  getPredictionCoords: getPredictionCoords\n};","map":{"version":3,"sources":["D:/Node.Js/React Native/weather/app/api/weather.js"],"names":["settings","apiClient","getCity","city","get","apiKey","response","console","log","data","getCoords","coords","getPredictionCity","getPredictionCoords"],"mappings":";AAAA,OAAOA,QAAP;AACA,OAAOC,SAAP;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAOC,UAAAA,IAAP,2DAAc,OAAd;AAAA;AAAA;AAAA,2CAEWF,SAAS,CAACG,GAAV,gBACRD,IADQ,eACMH,QAAQ,CAACK,MADf,CAFX;;AAAA;AAENC,UAAAA,QAFM;AAKZC,UAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AALY,2CAMLA,QAAQ,CAACG,IANJ;;AAAA;AAAA;AAAA;AAQZF,UAAAA,OAAO,CAACC,GAAR;AARY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB;;AAaA,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACC,MAAD;AAAA,SAEhBV,SAAS,CAACG,GAAV,gBAA2BO,MAA3B,eAA2CX,QAAQ,CAACK,MAApD,CAFgB;AAAA,CAAlB;;AAIA,IAAMO,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,MAACT,IAAD,uEAAQ,OAAR;AAAA,SAExBF,SAAS,CAACG,GAAV,gBAA2BD,IAA3B,eAAyCH,QAAQ,CAACK,MAAlD,CAFwB;AAAA,CAA1B;;AAIA,IAAMQ,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACF,MAAD;AAAA,SAE1BV,SAAS,CAACG,GAAV,gBAA2BO,MAA3B,eAA2CX,QAAQ,CAACK,MAApD,CAF0B;AAAA,CAA5B;;AAIA,eAAe;AAAEH,EAAAA,OAAO,EAAPA,OAAF;AAAWQ,EAAAA,SAAS,EAATA,SAAX;AAAsBE,EAAAA,iBAAiB,EAAjBA,iBAAtB;AAAyCC,EAAAA,mBAAmB,EAAnBA;AAAzC,CAAf","sourcesContent":["import settings from \"../config/settings\";\r\nimport apiClient from \"./client\";\r\n\r\nconst getCity = async (city = \"pabna\") => {\r\n  try {\r\n    const response = await apiClient.get(\r\n      `weather?q=${city}&appid=${settings.apiKey}`\r\n    );\r\n    console.log(response);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.log(err);\r\n    return;\r\n  }\r\n};\r\n\r\nconst getCoords = (coords) =>\r\n  // should be resolved=>\r\n  apiClient.get(`weather?q=${coords}&appid=${settings.apiKey}`);\r\n\r\nconst getPredictionCity = (city = \"pabna\") =>\r\n  // should be resolved=>\r\n  apiClient.get(`weather?q=${city}&appid=${settings.apiKey}`);\r\n\r\nconst getPredictionCoords = (coords) =>\r\n  // should be resolved=>\r\n  apiClient.get(`weather?q=${coords}&appid=${settings.apiKey}`);\r\n\r\nexport default { getCity, getCoords, getPredictionCity, getPredictionCoords };\r\n"]},"metadata":{},"sourceType":"module"}