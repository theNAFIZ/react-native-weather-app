{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport weatherApi from \"../api/weather\";\nexport var SET_CITY = \"SET_CITY\";\nexport var GET_CITY_DATA = \"GET_CITY_DATA\";\nexport var GET_PREDICTION_CITY = \"GET_PREDICTION_CITY\";\nexport var SET_COORDS = \"GET_COORDS\";\nexport var GET_COORDS_DATA = \"GET_COORDS_DATA\";\nexport var GET_PREDICTION_COORDS = \"GET_PREDICTION_COORDS\";\nexport var ERROR = \"ERROR\";\nexport var createActions = function createActions(dispatch) {\n  return {\n    setCity: function setCity(formData) {\n      dispatch({\n        type: SET_CITY,\n        payload: formData\n      });\n    },\n    setCoords: function setCoords(_ref) {\n      var lat = _ref.lat,\n          lon = _ref.lon;\n\n      try {\n        dispatch({\n          type: SET_COORDS,\n          payload: {\n            lat: lat,\n            lon: lon\n          }\n        });\n      } catch (error) {\n        console.log(error);\n        dispatch({\n          type: ERROR,\n          payload: \"Couldn't get current location of your device\"\n        });\n      }\n    },\n    getCity: function getCity(loc) {\n      var wData;\n      return _regeneratorRuntime.async(function getCity$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(weatherApi.getCity(loc));\n\n            case 3:\n              wData = _context.sent;\n              console.log(wData);\n              dispatch({\n                type: GET_CITY_DATA,\n                payload: wData\n              });\n              _context.next = 12;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n              dispatch({\n                type: ERROR,\n                payload: \"Error\"\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 8]], Promise);\n    },\n    getCoords: function getCoords(_ref2) {\n      var lat, lon, wData;\n      return _regeneratorRuntime.async(function getCoords$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              lat = _ref2.lat, lon = _ref2.lon;\n              _context2.prev = 1;\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(weatherApi.getCoords({\n                lat: lat,\n                lon: lon\n              }));\n\n            case 4:\n              wData = _context2.sent;\n              dispatch({\n                type: GET_COORDS_DATA,\n                payload: wData.data\n              });\n              _context2.next = 12;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log(_context2.t0);\n              dispatch({\n                type: ERROR,\n                payload: \"Error\"\n              });\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[1, 8]], Promise);\n    },\n    getPredictionCity: function getPredictionCity(loc) {\n      var wData;\n      return _regeneratorRuntime.async(function getPredictionCity$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(weatherApi.getCityPrediction(loc));\n\n            case 3:\n              wData = _context3.sent;\n              dispatch({\n                type: GET_PREDICTION_CITY,\n                payload: wData.data\n              });\n              _context3.next = 11;\n              break;\n\n            case 7:\n              _context3.prev = 7;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.log(_context3.t0);\n              dispatch({\n                type: ERROR,\n                payload: \"Error\"\n              });\n\n            case 11:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    },\n    getPredictionCoords: function getPredictionCoords(_ref3) {\n      var lat, lon, wData;\n      return _regeneratorRuntime.async(function getPredictionCoords$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              lat = _ref3.lat, lon = _ref3.lon;\n              _context4.prev = 1;\n              _context4.next = 4;\n              return _regeneratorRuntime.awrap(weatherApi.getPredictionCoords({\n                lat: lat,\n                lon: lon\n              }));\n\n            case 4:\n              wData = _context4.sent;\n              dispatch({\n                type: GET_PREDICTION_COORDS,\n                payload: wData.data\n              });\n              _context4.next = 12;\n              break;\n\n            case 8:\n              _context4.prev = 8;\n              _context4.t0 = _context4[\"catch\"](1);\n              console.log(_context4.t0);\n              dispatch({\n                type: ERROR,\n                payload: \"Error\"\n              });\n\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, [[1, 8]], Promise);\n    }\n  };\n};","map":{"version":3,"sources":["D:/Node.Js/React Native/weather/app/context/actions.js"],"names":["weatherApi","SET_CITY","GET_CITY_DATA","GET_PREDICTION_CITY","SET_COORDS","GET_COORDS_DATA","GET_PREDICTION_COORDS","ERROR","createActions","dispatch","setCity","formData","type","payload","setCoords","lat","lon","error","console","log","getCity","loc","wData","getCoords","data","getPredictionCity","getCityPrediction","getPredictionCoords"],"mappings":"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","sourcesContent":["import weatherApi from \"../api/weather\";\r\n\r\nexport const SET_CITY = \"SET_CITY\";\r\nexport const GET_CITY_DATA = \"GET_CITY_DATA\";\r\nexport const GET_PREDICTION_CITY = \"GET_PREDICTION_CITY\";\r\nexport const SET_COORDS = \"GET_COORDS\";\r\nexport const GET_COORDS_DATA = \"GET_COORDS_DATA\";\r\nexport const GET_PREDICTION_COORDS = \"GET_PREDICTION_COORDS\";\r\nexport const ERROR = \"ERROR\";\r\n\r\nexport const createActions = (dispatch) => ({\r\n  setCity: (formData) => {\r\n    dispatch({\r\n      type: SET_CITY,\r\n      payload: formData,\r\n    });\r\n  },\r\n  setCoords: ({ lat, lon }) => {\r\n    try {\r\n      //Get Coords from phone\r\n      dispatch({\r\n        type: SET_COORDS,\r\n        payload: { lat, lon }, //coords lat, lon\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      //Error\r\n      dispatch({\r\n        type: ERROR,\r\n        payload: \"Couldn't get current location of your device\",\r\n      });\r\n    }\r\n  },\r\n  getCity: async (loc) => {\r\n    try {\r\n      const wData = await weatherApi.getCity(loc);\r\n      console.log(wData);\r\n      dispatch({\r\n        type: GET_CITY_DATA,\r\n        payload: wData,\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch({\r\n        type: ERROR,\r\n        payload: \"Error\",\r\n      });\r\n    }\r\n  },\r\n  getCoords: async ({ lat, lon }) => {\r\n    try {\r\n      const wData = await weatherApi.getCoords({ lat, lon });\r\n      dispatch({\r\n        type: GET_COORDS_DATA,\r\n        payload: wData.data,\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch({\r\n        type: ERROR,\r\n        payload: \"Error\",\r\n      });\r\n    }\r\n  },\r\n  getPredictionCity: async (loc) => {\r\n    try {\r\n      const wData = await weatherApi.getCityPrediction(loc);\r\n      dispatch({\r\n        type: GET_PREDICTION_CITY,\r\n        payload: wData.data,\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch({\r\n        type: ERROR,\r\n        payload: \"Error\",\r\n      });\r\n    }\r\n  },\r\n  getPredictionCoords: async ({ lat, lon }) => {\r\n    try {\r\n      const wData = await weatherApi.getPredictionCoords({ lat, lon });\r\n      dispatch({\r\n        type: GET_PREDICTION_COORDS,\r\n        payload: wData.data,\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch({\r\n        type: ERROR,\r\n        payload: \"Error\",\r\n      });\r\n    }\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}