{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport settings from \"../config/settings\";\nimport { create } from \"apisauce\";\nimport storage from \"./storage\";\nvar apiClient = create({\n  baseURL: \"https://api.openweathermap.org/data/2.5/\",\n  timeout: 300000,\n  timeoutErrorMessage: \"Timeout Error: Slow or no connection.\"\n});\n\nvar getCity = function getCity(city) {\n  var current, loc, onecall;\n  return _regeneratorRuntime.async(function getCity$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(apiClient.get(\"weather?q=\" + city + \"&appid=\" + settings.apiKey));\n\n        case 3:\n          current = _context.sent;\n\n          if (!current.ok) {\n            _context.next = 19;\n            break;\n          }\n\n          if (!(current.data.cod !== 200)) {\n            _context.next = 7;\n            break;\n          }\n\n          return _context.abrupt(\"return\");\n\n        case 7:\n          loc = {\n            city: current.data.name,\n            country: current.data.sys.country\n          };\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(onecallReq(loc, current.data.coord.lat, current.data.coord.lon));\n\n        case 10:\n          onecall = _context.sent;\n\n          if (!onecall) {\n            _context.next = 16;\n            break;\n          }\n\n          console.log(onecall.data);\n          return _context.abrupt(\"return\", {\n            loc: loc,\n            data: onecall.data\n          });\n\n        case 16:\n          return _context.abrupt(\"return\");\n\n        case 17:\n          _context.next = 20;\n          break;\n\n        case 19:\n          return _context.abrupt(\"return\");\n\n        case 20:\n          _context.next = 26;\n          break;\n\n        case 22:\n          _context.prev = 22;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          return _context.abrupt(\"return\");\n\n        case 26:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 22]], Promise);\n};\n\nvar getCoords = function getCoords(lat, lon) {\n  var current, loc, onecall;\n  return _regeneratorRuntime.async(function getCoords$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(apiClient.get(\"weather?lat=\" + lat + \"&lon=\" + lon + \"&appid=\" + settings.apiKey));\n\n        case 3:\n          current = _context2.sent;\n\n          if (!current.ok) {\n            _context2.next = 14;\n            break;\n          }\n\n          if (!(current.data.cod !== 200)) {\n            _context2.next = 7;\n            break;\n          }\n\n          return _context2.abrupt(\"return\");\n\n        case 7:\n          loc = {\n            city: current.data.name,\n            country: current.data.sys.country\n          };\n          _context2.next = 10;\n          return _regeneratorRuntime.awrap(onecallReq(current.data.name, current.data.coord.lat, current.data.coord.lon));\n\n        case 10:\n          onecall = _context2.sent;\n          return _context2.abrupt(\"return\", {\n            loc: loc,\n            data: onecall.data\n          });\n\n        case 14:\n          return _context2.abrupt(\"return\");\n\n        case 15:\n          _context2.next = 21;\n          break;\n\n        case 17:\n          _context2.prev = 17;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n          return _context2.abrupt(\"return\");\n\n        case 21:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 17]], Promise);\n};\n\nvar onecallReq = function onecallReq(loc, lat, lon) {\n  var res;\n  return _regeneratorRuntime.async(function onecallReq$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(apiClient.get(\"onecall?lat=\" + lat + \"&lon=\" + lon + \"&exclude=minutely&appid=\" + settings.apiKey));\n\n        case 2:\n          res = _context3.sent;\n\n          if (!res.ok) {\n            _context3.next = 11;\n            break;\n          }\n\n          _context3.next = 6;\n          return _regeneratorRuntime.awrap(storage.storeItems(_objectSpread({\n            loc: loc\n          }, res.data)));\n\n        case 6:\n          _context3.next = 8;\n          return _regeneratorRuntime.awrap(storage.formatResponse(_objectSpread({\n            loc: loc\n          }, res.data)));\n\n        case 8:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 11:\n          _context3.next = 13;\n          return _regeneratorRuntime.awrap(storage.getItems(loc.city));\n\n        case 13:\n          res = _context3.sent;\n          return _context3.abrupt(\"return\", res);\n\n        case 15:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default {\n  getCity: getCity,\n  getCoords: getCoords\n};","map":{"version":3,"sources":["D:/Node.Js/React Native/weather/app/api/weather.js"],"names":["settings","create","storage","apiClient","baseURL","timeout","timeoutErrorMessage","getCity","city","get","apiKey","current","ok","data","cod","loc","name","country","sys","onecallReq","coord","lat","lon","onecall","console","log","error","getCoords","res","storeItems","formatResponse","getItems"],"mappings":"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","sourcesContent":["import settings from \"../config/settings\";\r\nimport { create } from \"apisauce\";\r\nimport storage from \"./storage\";\r\n\r\nconst apiClient = create({\r\n  baseURL: `https://api.openweathermap.org/data/2.5/`,\r\n  timeout: 300000,\r\n  timeoutErrorMessage: \"Timeout Error: Slow or no connection.\",\r\n});\r\n\r\nconst getCity = async (city) => {\r\n  try {\r\n    const current = await apiClient.get(\r\n      `weather?q=${city}&appid=${settings.apiKey}`\r\n    );\r\n    if (current.ok) {\r\n      if (current.data.cod !== 200) {\r\n        return;\r\n      }\r\n      const loc = {\r\n        city: current.data.name,\r\n        country: current.data.sys.country,\r\n      };\r\n      const onecall = await onecallReq(\r\n        loc,\r\n        current.data.coord.lat,\r\n        current.data.coord.lon\r\n      );\r\n\r\n      if (onecall) {\r\n        console.log(onecall.data);\r\n        return {\r\n          loc,\r\n          data: onecall.data,\r\n        };\r\n      } else return;\r\n    } else return;\r\n  } catch (err) {\r\n    console.error(err);\r\n    return;\r\n  }\r\n};\r\n\r\nconst getCoords = async (lat, lon) => {\r\n  try {\r\n    // Here try to get from storage\r\n    const current = await apiClient.get(\r\n      `weather?lat=${lat}&lon=${lon}&appid=${settings.apiKey}`\r\n    );\r\n    if (current.ok) {\r\n      if (current.data.cod !== 200) return;\r\n      const loc = {\r\n        city: current.data.name,\r\n        country: current.data.sys.country,\r\n      };\r\n      const onecall = await onecallReq(\r\n        current.data.name,\r\n        current.data.coord.lat,\r\n        current.data.coord.lon\r\n      );\r\n      return {\r\n        loc,\r\n        data: onecall.data,\r\n      };\r\n    } else return;\r\n  } catch (err) {\r\n    console.log(err);\r\n    return;\r\n  }\r\n};\r\n\r\nconst onecallReq = async (loc, lat, lon) => {\r\n  var res = await apiClient.get(\r\n    `onecall?lat=${lat}&lon=${lon}&exclude=minutely&appid=${settings.apiKey}`\r\n  );\r\n  // downloaded\r\n  if (res.ok) {\r\n    await storage.storeItems({ loc, ...res.data });\r\n    return await storage.formatResponse({ loc, ...res.data });\r\n  } // cached\r\n  else {\r\n    res = await storage.getItems(loc.city);\r\n    return res;\r\n  }\r\n};\r\n\r\nexport default { getCity, getCoords };\r\n"]},"metadata":{},"sourceType":"module"}