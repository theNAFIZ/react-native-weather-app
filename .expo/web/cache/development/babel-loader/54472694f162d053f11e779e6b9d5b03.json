{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport settings from \"../config/settings\";\nimport { create } from \"apisauce\";\nvar apiClient = create({\n  baseURL: \"https://api.openweathermap.org/data/2.5/\"\n});\n\nvar getCity = function getCity(city) {\n  var current, onecall;\n  return _regeneratorRuntime.async(function getCity$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(apiClient.get(\"weather?q=\" + city + \"&appid=\" + settings.apiKey));\n\n        case 3:\n          current = _context.sent;\n\n          if (!(current.data.cod !== 200)) {\n            _context.next = 6;\n            break;\n          }\n\n          return _context.abrupt(\"return\");\n\n        case 6:\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(onecallReq(current.data.coord.lat, current.data.coord.lon));\n\n        case 8:\n          onecall = _context.sent;\n          return _context.abrupt(\"return\", {\n            city: current.data.name,\n            data: onecall.data\n          });\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          return _context.abrupt(\"return\");\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 12]], Promise);\n};\n\nvar getCoords = function getCoords(lat, lon) {\n  var current, onecall;\n  return _regeneratorRuntime.async(function getCoords$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          current = apiClient.get(\"weather?lat=\" + lat + \"&lon=\" + lon + \"&appid=\" + settings.apiKey);\n\n          if (!(current.data.cod !== 200)) {\n            _context2.next = 4;\n            break;\n          }\n\n          return _context2.abrupt(\"return\");\n\n        case 4:\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(onecallReq(current.data.coord.lat, current.data.coord.lon));\n\n        case 6:\n          onecall = _context2.sent;\n          return _context2.abrupt(\"return\", {\n            loc: {\n              city: current.data.name,\n              country: current.data.sys.country\n            },\n            data: onecall.data\n          });\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n          return _context2.abrupt(\"return\");\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 10]], Promise);\n};\n\nvar onecallReq = function onecallReq(lat, lon) {\n  return _regeneratorRuntime.async(function onecallReq$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(apiClient.get(\"onecall?lat=\" + lat + \"&lon=\" + lon + \"&appid=\" + settings.apiKey));\n\n        case 2:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default {\n  getCity: getCity,\n  getCoords: getCoords\n};","map":{"version":3,"sources":["D:/Node.Js/React Native/weather/app/api/weather.js"],"names":["settings","create","apiClient","baseURL","getCity","city","get","apiKey","current","data","cod","onecallReq","coord","lat","lon","onecall","name","console","log","getCoords","loc","country","sys"],"mappings":";AAAA,OAAOA,QAAP;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA,IAAMC,SAAS,GAAGD,MAAM,CAAC;AACvBE,EAAAA,OAAO;AADgB,CAAD,CAAxB;;AAIA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEUH,SAAS,CAACI,GAAV,gBACPD,IADO,eACOL,QAAQ,CAACO,MADhB,CAFV;;AAAA;AAENC,UAAAA,OAFM;;AAAA,gBAKRA,OAAO,CAACC,IAAR,CAAaC,GAAb,KAAqB,GALb;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,2CAQUC,UAAU,CAC9BH,OAAO,CAACC,IAAR,CAAaG,KAAb,CAAmBC,GADW,EAE9BL,OAAO,CAACC,IAAR,CAAaG,KAAb,CAAmBE,GAFW,CARpB;;AAAA;AAQNC,UAAAA,OARM;AAAA,2CAYL;AAAEV,YAAAA,IAAI,EAAEG,OAAO,CAACC,IAAR,CAAaO,IAArB;AAA2BP,YAAAA,IAAI,EAAEM,OAAO,CAACN;AAAzC,WAZK;;AAAA;AAAA;AAAA;AAcZQ,UAAAA,OAAO,CAACC,GAAR;AAdY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB;;AAmBA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAON,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAERN,UAAAA,OAFQ,GAEEN,SAAS,CAACI,GAAV,kBACCO,GADD,aACYC,GADZ,eACyBd,QAAQ,CAACO,MADlC,CAFF;;AAAA,gBAKVC,OAAO,CAACC,IAAR,CAAaC,GAAb,KAAqB,GALX;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,2CAMQC,UAAU,CAC9BH,OAAO,CAACC,IAAR,CAAaG,KAAb,CAAmBC,GADW,EAE9BL,OAAO,CAACC,IAAR,CAAaG,KAAb,CAAmBE,GAFW,CANlB;;AAAA;AAMRC,UAAAA,OANQ;AAAA,4CAUP;AACLK,YAAAA,GAAG,EAAE;AAAEf,cAAAA,IAAI,EAAEG,OAAO,CAACC,IAAR,CAAaO,IAArB;AAA2BK,cAAAA,OAAO,EAAEb,OAAO,CAACC,IAAR,CAAaa,GAAb,CAAiBD;AAArD,aADA;AAELZ,YAAAA,IAAI,EAAEM,OAAO,CAACN;AAFT,WAVO;;AAAA;AAAA;AAAA;AAedQ,UAAAA,OAAO,CAACC,GAAR;AAfc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB;;AAoBA,IAAMP,UAAU,GAAG,SAAbA,UAAa,CAAOE,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACJZ,SAAS,CAACI,GAAV,kBACIO,GADJ,aACeC,GADf,eAC4Bd,QAAQ,CAACO,MADrC,CADI;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAKA,eAAe;AAAEH,EAAAA,OAAO,EAAPA,OAAF;AAAWe,EAAAA,SAAS,EAATA;AAAX,CAAf","sourcesContent":["import settings from \"../config/settings\";\r\nimport { create } from \"apisauce\";\r\n\r\nconst apiClient = create({\r\n  baseURL: `https://api.openweathermap.org/data/2.5/`,\r\n});\r\n\r\nconst getCity = async (city) => {\r\n  try {\r\n    const current = await apiClient.get(\r\n      `weather?q=${city}&appid=${settings.apiKey}`\r\n    );\r\n    if (current.data.cod !== 200) {\r\n      return;\r\n    }\r\n    const onecall = await onecallReq(\r\n      current.data.coord.lat,\r\n      current.data.coord.lon\r\n    );\r\n    return { city: current.data.name, data: onecall.data };\r\n  } catch (err) {\r\n    console.log(err);\r\n    return;\r\n  }\r\n};\r\n\r\nconst getCoords = async (lat, lon) => {\r\n  try {\r\n    const current = apiClient.get(\r\n      `weather?lat=${lat}&lon=${lon}&appid=${settings.apiKey}`\r\n    );\r\n    if (current.data.cod !== 200) return;\r\n    const onecall = await onecallReq(\r\n      current.data.coord.lat,\r\n      current.data.coord.lon\r\n    );\r\n    return {\r\n      loc: { city: current.data.name, country: current.data.sys.country },\r\n      data: onecall.data,\r\n    };\r\n  } catch (err) {\r\n    console.log(err);\r\n    return;\r\n  }\r\n};\r\n\r\nconst onecallReq = async (lat, lon) => {\r\n  return await apiClient.get(\r\n    `onecall?lat=${lat}&lon=${lon}&appid=${settings.apiKey}`\r\n  );\r\n};\r\nexport default { getCity, getCoords };\r\n"]},"metadata":{},"sourceType":"module"}